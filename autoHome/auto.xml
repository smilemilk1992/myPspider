<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="4.1">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="uniED79"/>
    <GlyphID id="2" name="uniECC6"/>
    <GlyphID id="3" name="uniED18"/>
    <GlyphID id="4" name="uniEC64"/>
    <GlyphID id="5" name="uniECB6"/>
    <GlyphID id="6" name="uniEDF7"/>
    <GlyphID id="7" name="uniED43"/>
    <GlyphID id="8" name="uniED95"/>
    <GlyphID id="9" name="uniECE2"/>
    <GlyphID id="10" name="uniEC2E"/>
    <GlyphID id="11" name="uniEC80"/>
    <GlyphID id="12" name="uniEDC1"/>
    <GlyphID id="13" name="uniEC1F"/>
    <GlyphID id="14" name="uniED5F"/>
    <GlyphID id="15" name="uniECAC"/>
    <GlyphID id="16" name="uniECFE"/>
    <GlyphID id="17" name="uniEC4A"/>
    <GlyphID id="18" name="uniED8B"/>
    <GlyphID id="19" name="uniEDDD"/>
    <GlyphID id="20" name="uniED29"/>
    <GlyphID id="21" name="uniED7B"/>
    <GlyphID id="22" name="uniECC8"/>
    <GlyphID id="23" name="uniEE08"/>
    <GlyphID id="24" name="uniEC66"/>
    <GlyphID id="25" name="uniEDA7"/>
    <GlyphID id="26" name="uniECF3"/>
    <GlyphID id="27" name="uniED45"/>
    <GlyphID id="28" name="uniEC92"/>
    <GlyphID id="29" name="uniECE4"/>
    <GlyphID id="30" name="uniEC30"/>
    <GlyphID id="31" name="uniED71"/>
    <GlyphID id="32" name="uniEDC3"/>
    <GlyphID id="33" name="uniED0F"/>
    <GlyphID id="34" name="uniEC5C"/>
    <GlyphID id="35" name="uniECAE"/>
    <GlyphID id="36" name="uniEDEE"/>
    <GlyphID id="37" name="uniEC4C"/>
    <GlyphID id="38" name="uniED8D"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="6.21"/>
    <checkSumAdjustment value="0x1cc575d8"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00100000 00011001"/>
    <unitsPerEm value="2048"/>
    <created value="Fri Jul 18 15:30:55 1997"/>
    <modified value="Mon Jun  4 02:45:18 2018"/>
    <xMin value="7"/>
    <yMin value="-305"/>
    <xMax value="2057"/>
    <yMax value="1732"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="9"/>
    <fontDirectionHint value="1"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="2167"/>
    <descent value="-536"/>
    <lineGap value="0"/>
    <advanceWidthMax value="2048"/>
    <minLeftSideBearing value="12"/>
    <minRightSideBearing value="-16"/>
    <xMaxExtent value="2064"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="2"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="39"/>
    <maxPoints value="103"/>
    <maxContours value="7"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="92"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="2225"/>
    <maxSizeOfInstructions value="2566"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="3"/>
    <xAvgCharWidth value="987"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00001000"/>
    <ySubscriptXSize value="1434"/>
    <ySubscriptYSize value="1331"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="182"/>
    <ySuperscriptXSize value="1434"/>
    <ySuperscriptYSize value="1331"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="581"/>
    <yStrikeoutSize value="102"/>
    <yStrikeoutPosition value="655"/>
    <sFamilyClass value="2053"/>
    <panose>
      <bFamilyType value="2"/>
      <bSerifStyle value="11"/>
      <bWeight value="5"/>
      <bProportion value="3"/>
      <bContrast value="2"/>
      <bStrokeVariation value="2"/>
      <bArmStyle value="4"/>
      <bLetterForm value="2"/>
      <bMidline value="2"/>
      <bXHeight value="4"/>
    </panose>
    <ulUnicodeRange1 value="10000000 00000000 00000010 10000111"/>
    <ulUnicodeRange2 value="00101000 11001111 00111100 01010010"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00010110"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="MS  "/>
    <fsSelection value="00000000 01000000"/>
    <usFirstCharIndex value="60447"/>
    <usLastCharIndex value="60936"/>
    <sTypoAscender value="1663"/>
    <sTypoDescender value="-519"/>
    <sTypoLineGap value="9"/>
    <usWinAscent value="2167"/>
    <usWinDescent value="536"/>
    <ulCodePageRange1 value="00000000 00000100 00000000 00011111"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="1106"/>
    <sCapHeight value="1549"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="2"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="1428" lsb="179"/>
    <mtx name="uniEC1F" width="2048" lsb="60"/>
    <mtx name="uniEC2E" width="2048" lsb="50"/>
    <mtx name="uniEC30" width="2048" lsb="38"/>
    <mtx name="uniEC4A" width="2048" lsb="32"/>
    <mtx name="uniEC4C" width="2048" lsb="54"/>
    <mtx name="uniEC5C" width="2048" lsb="24"/>
    <mtx name="uniEC64" width="2048" lsb="36"/>
    <mtx name="uniEC66" width="2048" lsb="28"/>
    <mtx name="uniEC80" width="2048" lsb="38"/>
    <mtx name="uniEC92" width="2048" lsb="54"/>
    <mtx name="uniECAC" width="2048" lsb="60"/>
    <mtx name="uniECAE" width="2048" lsb="52"/>
    <mtx name="uniECB6" width="2048" lsb="36"/>
    <mtx name="uniECC6" width="2048" lsb="14"/>
    <mtx name="uniECC8" width="2048" lsb="32"/>
    <mtx name="uniECE2" width="2048" lsb="18"/>
    <mtx name="uniECE4" width="2048" lsb="106"/>
    <mtx name="uniECF3" width="2048" lsb="22"/>
    <mtx name="uniECFE" width="2048" lsb="52"/>
    <mtx name="uniED0F" width="2048" lsb="24"/>
    <mtx name="uniED18" width="2048" lsb="52"/>
    <mtx name="uniED29" width="2048" lsb="26"/>
    <mtx name="uniED43" width="2048" lsb="12"/>
    <mtx name="uniED45" width="2048" lsb="36"/>
    <mtx name="uniED5F" width="2048" lsb="32"/>
    <mtx name="uniED71" width="2048" lsb="40"/>
    <mtx name="uniED79" width="2048" lsb="114"/>
    <mtx name="uniED7B" width="2048" lsb="12"/>
    <mtx name="uniED8B" width="2048" lsb="34"/>
    <mtx name="uniED8D" width="2048" lsb="22"/>
    <mtx name="uniED95" width="2048" lsb="24"/>
    <mtx name="uniEDA7" width="2048" lsb="62"/>
    <mtx name="uniEDC1" width="2048" lsb="20"/>
    <mtx name="uniEDC3" width="2048" lsb="14"/>
    <mtx name="uniEDDD" width="2048" lsb="132"/>
    <mtx name="uniEDEE" width="2048" lsb="186"/>
    <mtx name="uniEDF7" width="2048" lsb="40"/>
    <mtx name="uniEE08" width="2048" lsb="32"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="0" platEncID="3" language="0">
      <map code="0xec1f" name="uniEC1F"/><!-- ???? -->
      <map code="0xec2e" name="uniEC2E"/><!-- ???? -->
      <map code="0xec30" name="uniEC30"/><!-- ???? -->
      <map code="0xec4a" name="uniEC4A"/><!-- ???? -->
      <map code="0xec4c" name="uniEC4C"/><!-- ???? -->
      <map code="0xec5c" name="uniEC5C"/><!-- ???? -->
      <map code="0xec64" name="uniEC64"/><!-- ???? -->
      <map code="0xec66" name="uniEC66"/><!-- ???? -->
      <map code="0xec80" name="uniEC80"/><!-- ???? -->
      <map code="0xec92" name="uniEC92"/><!-- ???? -->
      <map code="0xecac" name="uniECAC"/><!-- ???? -->
      <map code="0xecae" name="uniECAE"/><!-- ???? -->
      <map code="0xecb6" name="uniECB6"/><!-- ???? -->
      <map code="0xecc6" name="uniECC6"/><!-- ???? -->
      <map code="0xecc8" name="uniECC8"/><!-- ???? -->
      <map code="0xece2" name="uniECE2"/><!-- ???? -->
      <map code="0xece4" name="uniECE4"/><!-- ???? -->
      <map code="0xecf3" name="uniECF3"/><!-- ???? -->
      <map code="0xecfe" name="uniECFE"/><!-- ???? -->
      <map code="0xed0f" name="uniED0F"/><!-- ???? -->
      <map code="0xed18" name="uniED18"/><!-- ???? -->
      <map code="0xed29" name="uniED29"/><!-- ???? -->
      <map code="0xed43" name="uniED43"/><!-- ???? -->
      <map code="0xed45" name="uniED45"/><!-- ???? -->
      <map code="0xed5f" name="uniED5F"/><!-- ???? -->
      <map code="0xed71" name="uniED71"/><!-- ???? -->
      <map code="0xed79" name="uniED79"/><!-- ???? -->
      <map code="0xed7b" name="uniED7B"/><!-- ???? -->
      <map code="0xed8b" name="uniED8B"/><!-- ???? -->
      <map code="0xed8d" name="uniED8D"/><!-- ???? -->
      <map code="0xed95" name="uniED95"/><!-- ???? -->
      <map code="0xeda7" name="uniEDA7"/><!-- ???? -->
      <map code="0xedc1" name="uniEDC1"/><!-- ???? -->
      <map code="0xedc3" name="uniEDC3"/><!-- ???? -->
      <map code="0xeddd" name="uniEDDD"/><!-- ???? -->
      <map code="0xedee" name="uniEDEE"/><!-- ???? -->
      <map code="0xedf7" name="uniEDF7"/><!-- ???? -->
      <map code="0xee08" name="uniEE08"/><!-- ???? -->
    </cmap_format_4>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0xec1f" name="uniEC1F"/><!-- ???? -->
      <map code="0xec2e" name="uniEC2E"/><!-- ???? -->
      <map code="0xec30" name="uniEC30"/><!-- ???? -->
      <map code="0xec4a" name="uniEC4A"/><!-- ???? -->
      <map code="0xec4c" name="uniEC4C"/><!-- ???? -->
      <map code="0xec5c" name="uniEC5C"/><!-- ???? -->
      <map code="0xec64" name="uniEC64"/><!-- ???? -->
      <map code="0xec66" name="uniEC66"/><!-- ???? -->
      <map code="0xec80" name="uniEC80"/><!-- ???? -->
      <map code="0xec92" name="uniEC92"/><!-- ???? -->
      <map code="0xecac" name="uniECAC"/><!-- ???? -->
      <map code="0xecae" name="uniECAE"/><!-- ???? -->
      <map code="0xecb6" name="uniECB6"/><!-- ???? -->
      <map code="0xecc6" name="uniECC6"/><!-- ???? -->
      <map code="0xecc8" name="uniECC8"/><!-- ???? -->
      <map code="0xece2" name="uniECE2"/><!-- ???? -->
      <map code="0xece4" name="uniECE4"/><!-- ???? -->
      <map code="0xecf3" name="uniECF3"/><!-- ???? -->
      <map code="0xecfe" name="uniECFE"/><!-- ???? -->
      <map code="0xed0f" name="uniED0F"/><!-- ???? -->
      <map code="0xed18" name="uniED18"/><!-- ???? -->
      <map code="0xed29" name="uniED29"/><!-- ???? -->
      <map code="0xed43" name="uniED43"/><!-- ???? -->
      <map code="0xed45" name="uniED45"/><!-- ???? -->
      <map code="0xed5f" name="uniED5F"/><!-- ???? -->
      <map code="0xed71" name="uniED71"/><!-- ???? -->
      <map code="0xed79" name="uniED79"/><!-- ???? -->
      <map code="0xed7b" name="uniED7B"/><!-- ???? -->
      <map code="0xed8b" name="uniED8B"/><!-- ???? -->
      <map code="0xed8d" name="uniED8D"/><!-- ???? -->
      <map code="0xed95" name="uniED95"/><!-- ???? -->
      <map code="0xeda7" name="uniEDA7"/><!-- ???? -->
      <map code="0xedc1" name="uniEDC1"/><!-- ???? -->
      <map code="0xedc3" name="uniEDC3"/><!-- ???? -->
      <map code="0xeddd" name="uniEDDD"/><!-- ???? -->
      <map code="0xedee" name="uniEDEE"/><!-- ???? -->
      <map code="0xedf7" name="uniEDF7"/><!-- ???? -->
      <map code="0xee08" name="uniEE08"/><!-- ???? -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      NPUSHB[ ]	/* 81 values pushed */
      91 90 89 84 82 77 76 75 74 73 72 71 70 67 66 65 64 63 62 61 60 59 58 57 56
      55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31
      30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6
      5 4 3 2 1 0
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          25
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          FLIPOFF[ ]	/* SetAutoFlipOff */
          MIRP[10000]	/* MoveIndirectRelPt */
          FLIPON[ ]	/* SetAutoFlipOn */
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          0
          SRP2[ ]	/* SetRefPoint2 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZP0[ ]	/* SetZonePointer0 */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          20
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 2 values pushed */
            0 64
            SHPIX[ ]	/* ShiftZoneByPixel */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          6
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          FLIPOFF[ ]	/* SetAutoFlipOff */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[10010]	/* MoveIndirectRelPt */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          SRP2[ ]	/* SetRefPoint2 */
          FLIPON[ ]	/* SetAutoFlipOn */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          MD[1]	/* MeasureDistance */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          40
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            SRP0[ ]	/* SetRefPoint0 */
            MDRP[10110]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            SRP0[ ]	/* SetRefPoint0 */
            MIRP[10010]	/* MoveIndirectRelPt */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            0
            SRP2[ ]	/* SetRefPoint2 */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        26
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MD[1]	/* MeasureDistance */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          16
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            MD[0]	/* MeasureDistance */
            PUSHB[ ]	/* 1 value pushed */
            0
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              0
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                PUSHW[ ]	/* 1 value pushed */
                -30
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              ELSE[ ]	/* Else */
                PUSHB[ ]	/* 1 value pushed */
                0
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              0
              GT[ ]	/* GreaterThan */
              IF[ ]	/* If */
                PUSHB[ ]	/* 1 value pushed */
                30
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              ELSE[ ]	/* Else */
                PUSHB[ ]	/* 1 value pushed */
                0
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZP0[ ]	/* SetZonePointer0 */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          20
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            0 -64
            SHPIX[ ]	/* ShiftZoneByPixel */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          6
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        FLIPOFF[ ]	/* SetAutoFlipOff */
        SVTCA[1]	/* SetFPVectorToAxis */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 2 values pushed */
        12 25
        RS[ ]	/* ReadStore */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP1[ ]	/* SetZonePointer1 */
        PUSHB[ ]	/* 2 values pushed */
        0 12
        MIRP[00010]	/* MoveIndirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        PUSHW[ ]	/* 2 values pushed */
        0 -16
        SHPIX[ ]	/* ShiftZoneByPixel */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        0
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        40
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        0
        ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        0
        MDAP[1]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP1[ ]	/* SetZonePointer1 */
        MIRP[10010]	/* MoveIndirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        FLIPON[ ]	/* SetAutoFlipOn */
        PUSHB[ ]	/* 1 value pushed */
        0
        SRP2[ ]	/* SetRefPoint2 */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZP0[ ]	/* SetZonePointer0 */
          PUSHW[ ]	/* 2 values pushed */
          0 -32
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 1 value pushed */
          6
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[10]	/* Round */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          25
          RS[ ]	/* ReadStore */
          ABS[ ]	/* Absolute */
          ADD[ ]	/* Add */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10000]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          0
          SRP2[ ]	/* SetRefPoint2 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            SRP1[ ]	/* SetRefPoint1 */
            SHP[1]	/* ShiftPointByLastPoint */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          11 10
          RS[ ]	/* ReadStore */
          SWAP[ ]	/* SwapTopStack */
          RS[ ]	/* ReadStore */
          NEG[ ]	/* Negate */
          SPVFS[ ]	/* SetPVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 2 values pushed */
          10 11
          RS[ ]	/* ReadStore */
          SWAP[ ]	/* SwapTopStack */
          RS[ ]	/* ReadStore */
          SFVFS[ ]	/* SetFVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        12
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 2 values pushed */
        1 12
        MIAP[0]	/* MoveIndirectAbsPt */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        12
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 2 values pushed */
        2 12
        RCVT[ ]	/* ReadCVT */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        18
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[10]	/* Round */
        PUSHB[ ]	/* 1 value pushed */
        64
        MAX[ ]	/* Maximum */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        19
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[10]	/* Round */
        PUSHW[ ]	/* 1 value pushed */
        -64
        MIN[ ]	/* Minimum */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        PUSHB[ ]	/* 1 value pushed */
        18
        CALL[ ]	/* CallFunction */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        PUSHB[ ]	/* 1 value pushed */
        19
        CALL[ ]	/* CallFunction */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          7
          RS[ ]	/* ReadStore */
          NEG[ ]	/* Negate */
          SPVFS[ ]	/* SetPVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[01]	/* Round */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        0
        MAX[ ]	/* Maximum */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 2 values pushed */
        44 192
        ROLL[ ]	/* RollTopThreeStack */
        MIN[ ]	/* Minimum */
        PUSHW[ ]	/* 1 value pushed */
        4096
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        SUB[ ]	/* Subtract */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          SUB[ ]	/* Subtract */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 3
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[00]	/* Round */
        EQ[ ]	/* Equal */
        PUSHB[ ]	/* 1 value pushed */
        28
        MPPEM[ ]	/* MeasurePixelPerEm */
        LT[ ]	/* LessThan */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ADD[ ]	/* Add */
          ROUND[00]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[00]	/* Round */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        ROUND[00]	/* Round */
        NEG[ ]	/* Negate */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SDPVTL[1]	/* SetDualPVectorToLine */
          POP[ ]	/* PopTopStack */
          MDRP[00000]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          18
          RS[ ]	/* ReadStore */
          IF[ ]	/* If */
            SDPVTL[1]	/* SetDualPVectorToLine */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 1 value pushed */
            17
            CALL[ ]	/* CallFunction */
            PUSHB[ ]	/* 1 value pushed */
            13
            SWAP[ ]	/* SwapTopStack */
            WCVTP[ ]	/* WriteCVTInPixels */
            PUSHB[ ]	/* 1 value pushed */
            13
            ROFF[ ]	/* RoundOff */
            MIRP[00100]	/* MoveIndirectRelPt */
          ELSE[ ]	/* Else */
            SPVTCA[1]	/* SetPVectorToAxis */
            ROLL[ ]	/* RollTopThreeStack */
            RCVT[ ]	/* ReadCVT */
            RTG[ ]	/* RoundToGrid */
            ROUND[01]	/* Round */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            13
            SWAP[ ]	/* SwapTopStack */
            WCVTP[ ]	/* WriteCVTInPixels */
            ROLL[ ]	/* RollTopThreeStack */
            ROLL[ ]	/* RollTopThreeStack */
            SDPVTL[1]	/* SetDualPVectorToLine */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            160
            LTEQ[ ]	/* LessThenOrEqual */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              17
              CALL[ ]	/* CallFunction */
              PUSHB[ ]	/* 1 value pushed */
              13
              SWAP[ ]	/* SwapTopStack */
              WCVTP[ ]	/* WriteCVTInPixels */
              PUSHB[ ]	/* 1 value pushed */
              13
              ROFF[ ]	/* RoundOff */
              MIRP[00100]	/* MoveIndirectRelPt */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              13
              ROFF[ ]	/* RoundOff */
              MIRP[00100]	/* MoveIndirectRelPt */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[00]	/* Round */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        ROUND[10]	/* Round */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        MDAP[1]	/* MoveDirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          25
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10110]	/* MoveIndirectRelPt */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ADD[ ]	/* Add */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          MAX[ ]	/* Maximum */
          NEG[ ]	/* Negate */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          WCVTP[ ]	/* WriteCVTInPixels */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        0
        NEQ[ ]	/* NotEqual */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MAX[ ]	/* Maximum */
          NEG[ ]	/* Negate */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          25
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        25
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          27
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          64
          EQ[ ]	/* Equal */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 1 value pushed */
            64
            SUB[ ]	/* Subtract */
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          64
          EQ[ ]	/* Equal */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            CINDEX[ ]	/* CopyXToTopStack */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        SDPVTL[1]	/* SetDualPVectorToLine */
        SFVTCA[1]	/* SetFVectorToAxis */
        MDAP[0]	/* MoveDirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        20
        CALL[ ]	/* CallFunction */
        SRP0[ ]	/* SetRefPoint0 */
        POP[ ]	/* PopTopStack */
        MDRP[00100]	/* MoveDirectRelPt */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MDRP[00000]	/* MoveDirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RTDG[ ]	/* RoundToDoubleGrid */
          MIRP[01101]	/* MoveIndirectRelPt */
          RTG[ ]	/* RoundToGrid */
        ELSE[ ]	/* Else */
          MIRP[01101]	/* MoveIndirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          ADD[ ]	/* Add */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            2
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            ROUND[00]	/* Round */
            ADD[ ]	/* Add */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            SWAP[ ]	/* SwapTopStack */
            WCVTP[ ]	/* WriteCVTInPixels */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RTDG[ ]	/* RoundToDoubleGrid */
          MDRP[01101]	/* MoveDirectRelPt */
          RTG[ ]	/* RoundToGrid */
        ELSE[ ]	/* Else */
          MDRP[01101]	/* MoveDirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -128
        DIV[ ]	/* Divide */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 2 values pushed */
        12 12
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 1 value pushed */
          -70
          MAX[ ]	/* Maximum */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          70
          MIN[ ]	/* Minimum */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        16
        ADD[ ]	/* Add */
        ROUND[00]	/* Round */
        SVTCA[1]	/* SetFPVectorToAxis */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        19
        LTEQ[ ]	/* LessThenOrEqual */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[00]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MIAP[1]	/* MoveIndirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SRP1[ ]	/* SetRefPoint1 */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[00]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MIAP[1]	/* MoveIndirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SRP1[ ]	/* SetRefPoint1 */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          7
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          SFVFS[ ]	/* SetFVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        12
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          0
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            -16
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            16
            SHPIX[ ]	/* ShiftZoneByPixel */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          4096
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          0
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            64
            SUB[ ]	/* Subtract */
            PUSHB[ ]	/* 1 value pushed */
            3
          EIF[ ]	/* EndIf */
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[01]	/* Round */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          40
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        MAX[ ]	/* Maximum */
        PUSHW[ ]	/* 1 value pushed */
        16384
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          MAX[ ]	/* Maximum */
          PUSHW[ ]	/* 1 value pushed */
          8192
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          0 64 47
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        2
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        192
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          MAX[ ]	/* Maximum */
          PUSHW[ ]	/* 1 value pushed */
          5461
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          0 128 47
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        2
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        MAX[ ]	/* Maximum */
        PUSHW[ ]	/* 1 value pushed */
        16384
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RTG[ ]	/* RoundToGrid */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10110]	/* MoveIndirectRelPt */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP1[ ]	/* SetRefPoint1 */
          SWAP[ ]	/* SwapTopStack */
          SRP2[ ]	/* SetRefPoint2 */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        192
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          -8
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 1 value pushed */
          8
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        19
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SPVTCA[1]	/* SetPVectorToAxis */
        ELSE[ ]	/* Else */
          SPVTCA[0]	/* SetPVectorToAxis */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        19
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SPVTCA[0]	/* SetPVectorToAxis */
        ELSE[ ]	/* Else */
          SPVTCA[1]	/* SetPVectorToAxis */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        10
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        23
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        -16
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        40
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[10000]	/* MoveDirectRelPt */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          MDRP[00000]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        0
        SRP2[ ]	/* SetRefPoint2 */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MDRP[10000]	/* MoveDirectRelPt */
        SWAP[ ]	/* SwapTopStack */
        MDRP[01001]	/* MoveDirectRelPt */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP1[ ]	/* SetZonePointer1 */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        3
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RTG[ ]	/* RoundToGrid */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10110]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
        MDRP[01100]	/* MoveDirectRelPt */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          SUB[ ]	/* Subtract */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[1]	/* MeasureDistance */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        14
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        14
        MIRP[01100]	/* MoveIndirectRelPt */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        14
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        27
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          0
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            ADD[ ]	/* Add */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            ROUND[00]	/* Round */
            PUSHB[ ]	/* 1 value pushed */
            0
            NEQ[ ]	/* NotEqual */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              32
              ADD[ ]	/* Add */
              WCVTP[ ]	/* WriteCVTInPixels */
              POP[ ]	/* PopTopStack */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            ADD[ ]	/* Add */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            ROUND[00]	/* Round */
            PUSHB[ ]	/* 1 value pushed */
            0
            NEQ[ ]	/* NotEqual */
            IF[ ]	/* If */
              PUSHW[ ]	/* 1 value pushed */
              -32
              ADD[ ]	/* Add */
              WCVTP[ ]	/* WriteCVTInPixels */
              PUSHB[ ]	/* 1 value pushed */
              28
              MPPEM[ ]	/* MeasurePixelPerEm */
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                DUP[ ]	/* DuplicateTopStack */
                RCVT[ ]	/* ReadCVT */
                PUSHB[ ]	/* 1 value pushed */
                32
                ADD[ ]	/* Add */
                WCVTP[ ]	/* WriteCVTInPixels */
              ELSE[ ]	/* Else */
                POP[ ]	/* PopTopStack */
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[00]	/* Round */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MIAP[1]	/* MoveIndirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -128
        DIV[ ]	/* Divide */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 2 values pushed */
        12 12
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 1 value pushed */
          -128
          MAX[ ]	/* Maximum */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          129
          MIN[ ]	/* Minimum */
        EIF[ ]	/* EndIf */
        ROUND[00]	/* Round */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        64
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SHC[1]	/* ShiftContourByLastPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        14
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            ROLL[ ]	/* RollTopThreeStack */
            ADD[ ]	/* Add */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          70
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          71
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          72
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          73
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
        ELSE[ ]	/* Else */
          ROFF[ ]	/* RoundOff */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 1
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        35 1
        GETINFO[ ]	/* GetInfo */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 1
        GETINFO[ ]	/* GetInfo */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          2 0
          WS[ ]	/* WriteStore */
          PUSHW[ ]	/* 2 values pushed */
          4096 32
          GETINFO[ ]	/* GetInfo */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            2 1 2
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
            WS[ ]	/* WriteStore */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 2 values pushed */
          36 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            8192 64
            GETINFO[ ]	/* GetInfo */
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              2 2 2
              RS[ ]	/* ReadStore */
              ADD[ ]	/* Add */
              WS[ ]	/* WriteStore */
              PUSHB[ ]	/* 2 values pushed */
              36 1
              GETINFO[ ]	/* GetInfo */
              EQ[ ]	/* Equal */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                2 32 2
                RS[ ]	/* ReadStore */
                ADD[ ]	/* Add */
                WS[ ]	/* WriteStore */
                SVTCA[0]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                SVTCA[1]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 4 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                256
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 256
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                512
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 16 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHB[ ]	/* 2 values pushed */
                38 1
                GETINFO[ ]	/* GetInfo */
                LTEQ[ ]	/* LessThenOrEqual */
                IF[ ]	/* If */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 512
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  1024
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 64 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 1024
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  2048
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 128 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          NPUSHB[ ]	/* 10 values pushed */
          5 64 8 64 9 64 12 2 13 2
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 2
          RS[ ]	/* ReadStore */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            5 64 8
            PUSHW[ ]	/* 3 values pushed */
            256 9 256
            PUSHB[ ]	/* 4 values pushed */
            12 1 13 1
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            128 2
            RS[ ]	/* ReadStore */
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 1 value pushed */
              384
              PUSHB[ ]	/* 2 values pushed */
              9 64
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 3 values pushed */
              384 9 320
            EIF[ ]	/* EndIf */
            PUSHW[ ]	/* 2 values pushed */
            16384 128
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            PUSHW[ ]	/* 2 values pushed */
            16384 512
            MUL[ ]	/* Multiply */
            PUSHW[ ]	/* 1 value pushed */
            1024
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        128
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        LT[ ]	/* LessThan */
        PUSHB[ ]	/* 1 value pushed */
        1
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          32
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01001]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        89
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MIRP[00101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      NPUSHB[ ]	/* 81 values pushed */
      223 224 22 23 28 212 213 22 23 28 123 124 22 27 123 124 25 209 210 22 23 28 118 119 22
      23 28 109 112 22 23 28 108 111 22 23 28 107 110 22 27 107 110 127 114 26 116 117 20 21
      28 103 106 20 21 28 102 105 20 21 28 101 104 20 27 101 104 133 113 26 25 115 22 122 67
      25 33 121 67 25 33
      NPUSHW[ ]	/* 54 values pushed */
      326 316 3 43 325 316 3 43 324 316 3 43 323 316 3 43 322 316 3 43 321 316 3 43 320
      316 3 43 319 316 3 43 318 316 3 43 317 316 3 43 315 316 3 43 314 316 3 43 313 316
      2 43 307 308
      PUSHB[ ]	/* 3 values pushed */
      3 43 192
      PUSHW[ ]	/* 1 value pushed */
      316
      NPUSHB[ ]	/* 17 values pushed */
      1 153 147 2 43 145 147 2 43 147 149 2 43 150 149 2 43
      NPUSHW[ ]	/* 46 values pushed */
      359 358 3 43 358 357 3 43 357 356 3 43 356 355 3 43 355 354 3 43 354 353 3 43 353
      352 3 43 351 352 3 43 350 352 3 43 349 352 3 43 348 352 3 43 347 352
      NPUSHB[ ]	/* 168 values pushed */
      3 43 138 137 2 43 137 133 2 43 129 127 2 43 125 127 2 43 127 133 2 43 136 133 1
      43 135 133 1 43 132 133 2 43 131 133 2 43 27 55 21 24 54 21 21 53 21 18 52 21
      15 51 21 12 50 21 9 49 21 6 48 21 3 47 21 0 46 21 38 39 14 40 39 15 42
      43 14 44 43 15 34 35 14 36 35 15 30 31 14 32 31 15 15 16 17 12 9 10 11 12
      6 7 8 12 3 4 5 12 0 1 2 12 27 1 29 13 24 7 26 13 21 16 23 13 18
      4 20 13 47 27 1 44 60 42 60 40 60 38 60 36 60 34 60 32 60 30 60 27 60 24
      60 21 60 18 60 15 60 9 60 6 60 3 60 0 60 80 51 84
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 1 value pushed */
      18
      MPPEM[ ]	/* MeasurePixelPerEm */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      EQ[ ]	/* Equal */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      19
      SVTCA[1]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      51
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      800
      GT[ ]	/* GreaterThan */
      PUSHB[ ]	/* 1 value pushed */
      50
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      9
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      51
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      2
      GETINFO[ ]	/* GetInfo */
      PUSHW[ ]	/* 1 value pushed */
      256
      EQ[ ]	/* Equal */
      PUSHB[ ]	/* 1 value pushed */
      4
      GETINFO[ ]	/* GetInfo */
      PUSHW[ ]	/* 1 value pushed */
      512
      EQ[ ]	/* Equal */
      PUSHB[ ]	/* 1 value pushed */
      18
      RS[ ]	/* ReadStore */
      AND[ ]	/* LogicalAnd */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHW[ ]	/* 1 value pushed */
        281
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
        SCANCTRL[ ]	/* ScanConversionControl */
      ELSE[ ]	/* Else */
        PUSHW[ ]	/* 2 values pushed */
        1 256
        PUSHB[ ]	/* 1 value pushed */
        75
        ADD[ ]	/* Add */
        SCANCTRL[ ]	/* ScanConversionControl */
        SCANTYPE[ ]	/* ScanType */
      EIF[ ]	/* EndIf */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SCVTCI[ ]	/* SetCVTCutIn */
      PUSHB[ ]	/* 1 value pushed */
      100
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        128
        SCVTCI[ ]	/* SetCVTCutIn */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      50
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        144
        SCVTCI[ ]	/* SetCVTCutIn */
      EIF[ ]	/* EndIf */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      50
      LTEQ[ ]	/* LessThenOrEqual */
      PUSHB[ ]	/* 1 value pushed */
      27
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      40 38
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      42
      RCVT[ ]	/* ReadCVT */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      44
      RCVT[ ]	/* ReadCVT */
      ADD[ ]	/* Add */
      WCVTP[ ]	/* WriteCVTInPixels */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      24
      PUSHB[ ]	/* 1 value pushed */
      63
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      9 50
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      80
      GT[ ]	/* GreaterThan */
      WS[ ]	/* WriteStore */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      8
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      8
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      26
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      200
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      54
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      12
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="1636"/>
    <cv index="1" value="18"/>
    <cv index="2" value="0"/>
    <cv index="3" value="1548"/>
    <cv index="4" value="25"/>
    <cv index="5" value="0"/>
    <cv index="6" value="1548"/>
    <cv index="7" value="25"/>
    <cv index="8" value="0"/>
    <cv index="9" value="0"/>
    <cv index="10" value="0"/>
    <cv index="11" value="0"/>
    <cv index="12" value="0"/>
    <cv index="13" value="0"/>
    <cv index="14" value="0"/>
    <cv index="15" value="1106"/>
    <cv index="16" value="27"/>
    <cv index="17" value="0"/>
    <cv index="18" value="0"/>
    <cv index="19" value="-25"/>
    <cv index="20" value="0"/>
    <cv index="21" value="0"/>
    <cv index="22" value="-27"/>
    <cv index="23" value="0"/>
    <cv index="24" value="0"/>
    <cv index="25" value="-25"/>
    <cv index="26" value="0"/>
    <cv index="27" value="-508"/>
    <cv index="28" value="-12"/>
    <cv index="29" value="0"/>
    <cv index="30" value="0"/>
    <cv index="31" value="0"/>
    <cv index="32" value="0"/>
    <cv index="33" value="0"/>
    <cv index="34" value="0"/>
    <cv index="35" value="690"/>
    <cv index="36" value="750"/>
    <cv index="37" value="130"/>
    <cv index="38" value="1548"/>
    <cv index="39" value="25"/>
    <cv index="40" value="631"/>
    <cv index="41" value="-25"/>
    <cv index="42" value="917"/>
    <cv index="43" value="25"/>
    <cv index="44" value="0"/>
    <cv index="45" value="-25"/>
    <cv index="46" value="0"/>
    <cv index="47" value="0"/>
    <cv index="48" value="0"/>
    <cv index="49" value="0"/>
    <cv index="50" value="0"/>
    <cv index="51" value="0"/>
    <cv index="52" value="0"/>
    <cv index="53" value="1795"/>
    <cv index="54" value="0"/>
    <cv index="55" value="0"/>
    <cv index="56" value="0"/>
    <cv index="57" value="0"/>
    <cv index="58" value="0"/>
    <cv index="59" value="0"/>
    <cv index="60" value="1714"/>
    <cv index="61" value="-141"/>
    <cv index="62" value="0"/>
    <cv index="63" value="0"/>
    <cv index="64" value="0"/>
    <cv index="65" value="2048"/>
    <cv index="66" value="0"/>
    <cv index="67" value="2048"/>
    <cv index="68" value="0"/>
    <cv index="69" value="1024"/>
    <cv index="70" value="0"/>
    <cv index="71" value="0"/>
    <cv index="72" value="160"/>
    <cv index="73" value="170"/>
    <cv index="74" value="0"/>
    <cv index="75" value="0"/>
    <cv index="76" value="135"/>
    <cv index="77" value="0"/>
    <cv index="78" value="0"/>
    <cv index="79" value="0"/>
    <cv index="80" value="120"/>
    <cv index="81" value="0"/>
    <cv index="82" value="0"/>
    <cv index="83" value="150"/>
    <cv index="84" value="106"/>
    <cv index="85" value="0"/>
    <cv index="86" value="0"/>
    <cv index="87" value="0"/>
    <cv index="88" value="0"/>
    <cv index="89" value="0"/>
    <cv index="90" value="0"/>
    <cv index="91" value="0"/>
    <cv index="92" value="0"/>
    <cv index="93" value="0"/>
    <cv index="94" value="0"/>
    <cv index="95" value="0"/>
    <cv index="96" value="0"/>
    <cv index="97" value="0"/>
    <cv index="98" value="245"/>
    <cv index="99" value="245"/>
    <cv index="100" value="0"/>
    <cv index="101" value="0"/>
    <cv index="102" value="0"/>
    <cv index="103" value="0"/>
    <cv index="104" value="0"/>
    <cv index="105" value="0"/>
    <cv index="106" value="0"/>
    <cv index="107" value="0"/>
    <cv index="108" value="0"/>
    <cv index="109" value="0"/>
    <cv index="110" value="0"/>
    <cv index="111" value="0"/>
    <cv index="112" value="0"/>
    <cv index="113" value="0"/>
    <cv index="114" value="0"/>
    <cv index="115" value="0"/>
    <cv index="116" value="0"/>
    <cv index="117" value="0"/>
    <cv index="118" value="0"/>
    <cv index="119" value="0"/>
    <cv index="120" value="0"/>
    <cv index="121" value="0"/>
    <cv index="122" value="0"/>
    <cv index="123" value="0"/>
    <cv index="124" value="0"/>
    <cv index="125" value="210"/>
    <cv index="126" value="0"/>
    <cv index="127" value="200"/>
    <cv index="128" value="0"/>
    <cv index="129" value="0"/>
    <cv index="130" value="0"/>
    <cv index="131" value="200"/>
    <cv index="132" value="0"/>
    <cv index="133" value="195"/>
    <cv index="134" value="0"/>
    <cv index="135" value="0"/>
    <cv index="136" value="0"/>
    <cv index="137" value="200"/>
    <cv index="138" value="0"/>
    <cv index="139" value="195"/>
    <cv index="140" value="153"/>
    <cv index="141" value="0"/>
    <cv index="142" value="0"/>
    <cv index="143" value="0"/>
    <cv index="144" value="0"/>
    <cv index="145" value="178"/>
    <cv index="146" value="0"/>
    <cv index="147" value="0"/>
    <cv index="148" value="0"/>
    <cv index="149" value="162"/>
    <cv index="150" value="0"/>
    <cv index="151" value="0"/>
    <cv index="152" value="0"/>
    <cv index="153" value="163"/>
    <cv index="154" value="130"/>
    <cv index="155" value="0"/>
    <cv index="156" value="0"/>
    <cv index="157" value="0"/>
    <cv index="158" value="0"/>
    <cv index="159" value="0"/>
    <cv index="160" value="0"/>
    <cv index="161" value="0"/>
    <cv index="162" value="0"/>
    <cv index="163" value="0"/>
    <cv index="164" value="0"/>
    <cv index="165" value="0"/>
    <cv index="166" value="170"/>
    <cv index="167" value="0"/>
    <cv index="168" value="940"/>
    <cv index="169" value="80"/>
    <cv index="170" value="0"/>
    <cv index="171" value="0"/>
    <cv index="172" value="0"/>
    <cv index="173" value="0"/>
    <cv index="174" value="0"/>
    <cv index="175" value="255"/>
    <cv index="176" value="255"/>
    <cv index="177" value="189"/>
    <cv index="178" value="530"/>
    <cv index="179" value="480"/>
    <cv index="180" value="0"/>
    <cv index="181" value="0"/>
    <cv index="182" value="0"/>
    <cv index="183" value="0"/>
    <cv index="184" value="0"/>
    <cv index="185" value="0"/>
    <cv index="186" value="0"/>
    <cv index="187" value="0"/>
    <cv index="188" value="0"/>
    <cv index="189" value="152"/>
    <cv index="190" value="152"/>
    <cv index="191" value="0"/>
    <cv index="192" value="225"/>
    <cv index="193" value="225"/>
    <cv index="194" value="149"/>
    <cv index="195" value="92"/>
    <cv index="196" value="94"/>
    <cv index="197" value="94"/>
    <cv index="198" value="100"/>
    <cv index="199" value="100"/>
    <cv index="200" value="167"/>
    <cv index="201" value="170"/>
    <cv index="202" value="160"/>
    <cv index="203" value="124"/>
    <cv index="204" value="148"/>
    <cv index="205" value="160"/>
    <cv index="206" value="0"/>
    <cv index="207" value="0"/>
    <cv index="208" value="0"/>
    <cv index="209" value="0"/>
    <cv index="210" value="0"/>
    <cv index="211" value="235"/>
    <cv index="212" value="0"/>
    <cv index="213" value="0"/>
    <cv index="214" value="235"/>
    <cv index="215" value="565"/>
    <cv index="216" value="128"/>
    <cv index="217" value="0"/>
    <cv index="218" value="104"/>
    <cv index="219" value="130"/>
    <cv index="220" value="0"/>
    <cv index="221" value="0"/>
    <cv index="222" value="152"/>
    <cv index="223" value="0"/>
    <cv index="224" value="0"/>
    <cv index="225" value="110"/>
    <cv index="226" value="114"/>
    <cv index="227" value="142"/>
    <cv index="228" value="150"/>
    <cv index="229" value="0"/>
    <cv index="230" value="130"/>
    <cv index="231" value="0"/>
    <cv index="232" value="0"/>
    <cv index="233" value="0"/>
    <cv index="234" value="140"/>
    <cv index="235" value="120"/>
    <cv index="236" value="0"/>
    <cv index="237" value="0"/>
    <cv index="238" value="0"/>
    <cv index="239" value="128"/>
    <cv index="240" value="142"/>
    <cv index="241" value="950"/>
    <cv index="242" value="118"/>
    <cv index="243" value="0"/>
    <cv index="244" value="0"/>
    <cv index="245" value="0"/>
    <cv index="246" value="0"/>
    <cv index="247" value="0"/>
    <cv index="248" value="0"/>
    <cv index="249" value="0"/>
    <cv index="250" value="0"/>
    <cv index="251" value="0"/>
    <cv index="252" value="0"/>
    <cv index="253" value="0"/>
    <cv index="254" value="0"/>
    <cv index="255" value="0"/>
    <cv index="256" value="0"/>
    <cv index="257" value="0"/>
    <cv index="258" value="0"/>
    <cv index="259" value="0"/>
    <cv index="260" value="0"/>
    <cv index="261" value="0"/>
    <cv index="262" value="0"/>
    <cv index="263" value="0"/>
    <cv index="264" value="0"/>
    <cv index="265" value="0"/>
    <cv index="266" value="0"/>
    <cv index="267" value="0"/>
    <cv index="268" value="0"/>
    <cv index="269" value="0"/>
    <cv index="270" value="0"/>
    <cv index="271" value="0"/>
    <cv index="272" value="0"/>
    <cv index="273" value="0"/>
    <cv index="274" value="0"/>
    <cv index="275" value="0"/>
    <cv index="276" value="0"/>
    <cv index="277" value="0"/>
    <cv index="278" value="0"/>
    <cv index="279" value="0"/>
    <cv index="280" value="0"/>
    <cv index="281" value="0"/>
    <cv index="282" value="0"/>
    <cv index="283" value="0"/>
    <cv index="284" value="0"/>
    <cv index="285" value="0"/>
    <cv index="286" value="0"/>
    <cv index="287" value="0"/>
    <cv index="288" value="0"/>
    <cv index="289" value="0"/>
    <cv index="290" value="0"/>
    <cv index="291" value="0"/>
    <cv index="292" value="0"/>
    <cv index="293" value="0"/>
    <cv index="294" value="0"/>
    <cv index="295" value="0"/>
    <cv index="296" value="0"/>
    <cv index="297" value="0"/>
    <cv index="298" value="0"/>
    <cv index="299" value="0"/>
    <cv index="300" value="70"/>
    <cv index="301" value="75"/>
    <cv index="302" value="80"/>
    <cv index="303" value="85"/>
    <cv index="304" value="90"/>
    <cv index="305" value="95"/>
    <cv index="306" value="100"/>
    <cv index="307" value="105"/>
    <cv index="308" value="110"/>
    <cv index="309" value="115"/>
    <cv index="310" value="120"/>
    <cv index="311" value="125"/>
    <cv index="312" value="130"/>
    <cv index="313" value="135"/>
    <cv index="314" value="140"/>
    <cv index="315" value="145"/>
    <cv index="316" value="150"/>
    <cv index="317" value="155"/>
    <cv index="318" value="160"/>
    <cv index="319" value="165"/>
    <cv index="320" value="170"/>
    <cv index="321" value="175"/>
    <cv index="322" value="180"/>
    <cv index="323" value="185"/>
    <cv index="324" value="190"/>
    <cv index="325" value="195"/>
    <cv index="326" value="200"/>
    <cv index="327" value="225"/>
    <cv index="328" value="230"/>
    <cv index="329" value="235"/>
    <cv index="330" value="240"/>
    <cv index="331" value="245"/>
    <cv index="332" value="250"/>
    <cv index="333" value="255"/>
    <cv index="334" value="260"/>
    <cv index="335" value="265"/>
    <cv index="336" value="70"/>
    <cv index="337" value="75"/>
    <cv index="338" value="80"/>
    <cv index="339" value="85"/>
    <cv index="340" value="90"/>
    <cv index="341" value="95"/>
    <cv index="342" value="100"/>
    <cv index="343" value="105"/>
    <cv index="344" value="110"/>
    <cv index="345" value="115"/>
    <cv index="346" value="120"/>
    <cv index="347" value="125"/>
    <cv index="348" value="130"/>
    <cv index="349" value="135"/>
    <cv index="350" value="140"/>
    <cv index="351" value="145"/>
    <cv index="352" value="150"/>
    <cv index="353" value="155"/>
    <cv index="354" value="160"/>
    <cv index="355" value="165"/>
    <cv index="356" value="170"/>
    <cv index="357" value="175"/>
    <cv index="358" value="180"/>
    <cv index="359" value="185"/>
    <cv index="360" value="190"/>
    <cv index="361" value="195"/>
    <cv index="362" value="200"/>
    <cv index="363" value="225"/>
    <cv index="364" value="230"/>
    <cv index="365" value="235"/>
    <cv index="366" value="240"/>
    <cv index="367" value="245"/>
    <cv index="368" value="250"/>
    <cv index="369" value="255"/>
    <cv index="370" value="260"/>
    <cv index="371" value="265"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef"/><!-- contains no outline data -->

    <TTGlyph name="uniEC1F" xMin="45" yMin="-109" xMax="2008" yMax="1500">
      <contour>
        <pt x="202" y="1500" on="1"/>
        <pt x="1858" y="1489" on="1"/>
        <pt x="1871" y="1335" on="1"/>
        <pt x="202" y="1325" on="1"/>
      </contour>
      <contour>
        <pt x="45" y="62" on="1"/>
        <pt x="2008" y="50" on="1"/>
        <pt x="1974" y="-109" on="1"/>
        <pt x="71" y="-109" on="1"/>
      </contour>
      <contour>
        <pt x="290" y="833" on="1"/>
        <pt x="1786" y="830" on="1"/>
        <pt x="1782" y="637" on="1"/>
        <pt x="257" y="650" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 16 values pushed */
          2 10 11 3 3 11 10 2 4 7 6 6 13 7 8 11
          PUSHW[ ]	/* 1 value pushed */
          320
          PUSHB[ ]	/* 7 values pushed */
          89 8 8 0 4 4 7
          PUSHW[ ]	/* 4 values pushed */
          320 89 4 -64
          PUSHB[ ]	/* 6 values pushed */
          20 26 72 4 0 3
          PUSHW[ ]	/* 1 value pushed */
          320
          NPUSHB[ ]	/* 22 values pushed */
          89 47 0 63 0 95 0 111 0 143 0 159 0 175 0 207 0 8 240 0 1 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC2E" xMin="30" yMin="-273" xMax="2014" yMax="1707">
      <contour>
        <pt x="62" y="968" on="1"/>
        <pt x="920" y="934" on="1"/>
        <pt x="921" y="1680" on="1"/>
        <pt x="1115" y="1707" on="1"/>
        <pt x="1130" y="960" on="1"/>
        <pt x="2004" y="934" on="1"/>
        <pt x="2014" y="776" on="1"/>
        <pt x="1120" y="786" on="1"/>
        <pt x="1106" y="-273" on="1"/>
        <pt x="923" y="-256" on="1"/>
        <pt x="940" y="776" on="1"/>
        <pt x="30" y="775" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 6 values pushed */
          6 6 13 4 1 8
          PUSHW[ ]	/* 1 value pushed */
          359
          NPUSHB[ ]	/* 31 values pushed */
          64 9 9 13 12 11 111 9 127 9 223 9 3 9 64 12 15 72 9 0 2 96 2 160 2
          176 2 4 14 3 2
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          33 40 72 2
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          28 31 72 2 7 11 0 11
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 8 values pushed */
          89 4 47 0 79 0 2 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC30" xMin="36" yMin="-267" xMax="2012" yMax="1698">
      <contour>
        <pt x="751" y="1435" on="1"/>
        <pt x="743" y="1550" on="1"/>
        <pt x="1985" y="1555" on="1"/>
        <pt x="1976" y="1432" on="1"/>
        <pt x="1438" y="1405" on="1"/>
        <pt x="1372" y="1194" on="0"/>
        <pt x="1288" y="961" on="1"/>
        <pt x="1413" y="962" on="1"/>
        <pt x="1408" y="-244" on="1"/>
        <pt x="1234" y="-267" on="1"/>
        <pt x="1242" y="912" on="1"/>
        <pt x="1034" y="433" on="0"/>
        <pt x="740" y="116" on="1"/>
        <pt x="706" y="126" on="0"/>
        <pt x="629" y="222" on="1"/>
        <pt x="1071" y="718" on="0"/>
        <pt x="1298" y="1418" on="1"/>
      </contour>
      <contour>
        <pt x="36" y="301" on="1"/>
        <pt x="187" y="370" on="0"/>
        <pt x="314" y="412" on="1"/>
        <pt x="322" y="1067" on="1"/>
        <pt x="66" y="1044" on="1"/>
        <pt x="83" y="1199" on="1"/>
        <pt x="315" y="1218" on="1"/>
        <pt x="349" y="1697" on="1"/>
        <pt x="467" y="1698" on="1"/>
        <pt x="499" y="1210" on="1"/>
        <pt x="736" y="1219" on="1"/>
        <pt x="747" y="1068" on="1"/>
        <pt x="480" y="1058" on="1"/>
        <pt x="496" y="484" on="1"/>
        <pt x="626" y="528" on="0"/>
        <pt x="747" y="552" on="1"/>
        <pt x="754" y="471" on="0"/>
        <pt x="763" y="412" on="1"/>
        <pt x="430" y="288" on="0"/>
        <pt x="62" y="144" on="1"/>
      </contour>
      <contour>
        <pt x="1562" y="940" on="1"/>
        <pt x="1820" y="597" on="0"/>
        <pt x="2012" y="228" on="1"/>
        <pt x="1872" y="150" on="1"/>
        <pt x="1688" y="529" on="0"/>
        <pt x="1440" y="827" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 13 values pushed */
          28 0 34 21 0 16 28 9 30 21 17 3 37
          PUSHW[ ]	/* 6 values pushed */
          -16 37 347 42 16 355
          PUSHB[ ]	/* 6 values pushed */
          4 16 4 4 6 8
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 3 values pushed */
          9 34 12
          PUSHW[ ]	/* 3 values pushed */
          -16 12 346
          NPUSHB[ ]	/* 10 values pushed */
          14 14 9 42 3 19 3 40 16 40
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 9 values pushed */
          39 39 44 36 17 17 26 23 30
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 46 values pushed */
          64 19 39 40 40 9 0 14 0 12 48 12 2 12 12 12 34 15 9 31 9 127 9 175 9
          191 9 239 9 6 20 9 64 13 18 72 0 9 1 22 3 9 9 17 32 34
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 11 values pushed */
          89 42 37 37 10 10 6 29 21 22 21
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 37 values pushed */
          89 26 22 19 30 15 32 31 32 2 11 32 64 14 20 72 15 6 1 34 3 6 64 16 20
          72 32 6 22 22 6 32 3 17 1 36 17
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 6 values pushed */
          89 36 4 0 1 0
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 7 values pushed */
          89 32 24 48 24 2 24
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 18 values pushed */
          11 15 72 24 24 127 1 1 47 1 63 1 79 1 111 1 4 1
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC4A" xMin="22" yMin="-254" xMax="2002" yMax="1693">
      <contour>
        <pt x="81" y="1277" on="1"/>
        <pt x="654" y="1273" on="1"/>
        <pt x="656" y="1450" on="0"/>
        <pt x="669" y="1693" on="1"/>
        <pt x="832" y="1690" on="1"/>
        <pt x="843" y="1453" on="0"/>
        <pt x="843" y="1286" on="1"/>
        <pt x="1468" y="1298" on="1"/>
        <pt x="1463" y="83" on="1"/>
        <pt x="1476" y="-48" on="0"/>
        <pt x="1597" y="-59" on="1"/>
        <pt x="1689" y="-68" on="1"/>
        <pt x="1817" y="-49" on="0"/>
        <pt x="1827" y="72" on="1"/>
        <pt x="1836" y="222" on="0"/>
        <pt x="1836" y="390" on="1"/>
        <pt x="1925" y="373" on="0"/>
        <pt x="2002" y="324" on="1"/>
        <pt x="1987" y="149" on="0"/>
        <pt x="1970" y="7" on="1"/>
        <pt x="1942" y="-206" on="0"/>
        <pt x="1715" y="-223" on="1"/>
        <pt x="1554" y="-216" on="1"/>
        <pt x="1308" y="-197" on="0"/>
        <pt x="1309" y="52" on="1"/>
        <pt x="1302" y="1111" on="1"/>
        <pt x="843" y="1133" on="1"/>
        <pt x="793" y="713" on="0"/>
        <pt x="769" y="508" on="1"/>
        <pt x="624" y="11" on="0"/>
        <pt x="140" y="-254" on="1"/>
        <pt x="91" y="-199" on="0"/>
        <pt x="22" y="-106" on="1"/>
        <pt x="443" y="136" on="0"/>
        <pt x="576" y="557" on="1"/>
        <pt x="656" y="702" on="0"/>
        <pt x="672" y="1128" on="1"/>
        <pt x="101" y="1116" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 4 values pushed */
          37 37 32 8
          PUSHW[ ]	/* 4 values pushed */
          356 24 17 356
          PUSHB[ ]	/* 7 values pushed */
          24 1 15 15 39 1 4
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 9 values pushed */
          3 3 1 30 32 32 26 36 6
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 26 values pushed */
          64 1 64 3 160 3 240 3 3 0 3 80 3 96 3 160 3 176 3 192 3 6 18 3 3
          32
          PUSHW[ ]	/* 4 values pushed */
          -16 30 32 312
          NPUSHB[ ]	/* 36 values pushed */
          89 143 30 159 30 175 30 3 15 30 1 21 30 64 29 33 72 30 64 12 18 72 0 30 16
          30 2 35 3 30 17 15 15 22 22 10
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 25 values pushed */
          89 22 64 44 47 72 22 64 25 34 72 22 64 15 21 72 22 3 0 26 37 6 0 0 37
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 24 values pushed */
          89 159 0 239 0 2 32 0 48 0 80 0 144 0 4 0 0 112 0 2 80 0 1 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          34 38 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01110]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC4C" xMin="59" yMin="-236" xMax="1995" yMax="1671">
      <contour>
        <pt x="62" y="1178" on="1"/>
        <pt x="1995" y="1167" on="1"/>
        <pt x="1991" y="1010" on="1"/>
        <pt x="59" y="1021" on="1"/>
      </contour>
      <contour>
        <pt x="837" y="1623" on="1"/>
        <pt x="957" y="1671" on="1"/>
        <pt x="1067" y="1556" on="0"/>
        <pt x="1200" y="1311" on="1"/>
        <pt x="1039" y="1243" on="1"/>
        <pt x="923" y="1477" on="0"/>
      </contour>
      <contour>
        <pt x="658" y="801" on="1"/>
        <pt x="817" y="679" on="1"/>
        <pt x="569" y="196" on="0"/>
        <pt x="204" y="-236" on="1"/>
        <pt x="122" y="-165" on="0"/>
        <pt x="67" y="-109" on="1"/>
        <pt x="393" y="267" on="0"/>
      </contour>
      <contour>
        <pt x="1216" y="656" on="1"/>
        <pt x="1358" y="783" on="1"/>
        <pt x="1679" y="346" on="0"/>
        <pt x="1988" y="-62" on="1"/>
        <pt x="1794" y="-208" on="1"/>
        <pt x="1470" y="326" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          3 2 18
          PUSHW[ ]	/* 3 values pushed */
          -16 18 350
          PUSHB[ ]	/* 4 values pushed */
          17 8 16 8
          PUSHW[ ]	/* 6 values pushed */
          355 7 5 -16 5 351
          PUSHB[ ]	/* 4 values pushed */
          4 10 16 10
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 8 values pushed */
          11 17 4 15 2 21 16 21
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 7 values pushed */
          7 11 20 20 24 3 13
          PUSHW[ ]	/* 3 values pushed */
          -16 13 352
          NPUSHB[ ]	/* 73 values pushed */
          64 15 7 59 8 1 73 8 89 8 105 8 3 8 8 0 4 4 59 5 123 5 2 5 5
          0 20 21 17 18 11 10 43 18 1 155 18 171 18 187 18 3 21 18 10 10 18 21 3 3
          15 63 13 1 2 15 13 79 13 2 11 0 13 160 13 2 17 3 13 13 3 0 3
          PUSHW[ ]	/* 1 value pushed */
          318
          NPUSHB[ ]	/* 16 values pushed */
          89 32 0 224 0 2 80 0 96 0 176 0 240 0 4 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC5C" xMin="31" yMin="-244" xMax="1997" yMax="1665">
      <contour>
        <pt x="569" y="1044" on="1"/>
        <pt x="1965" y="1051" on="1"/>
        <pt x="1940" y="909" on="1"/>
        <pt x="1513" y="911" on="1"/>
        <pt x="1503" y="351" on="1"/>
        <pt x="1535" y="267" on="0"/>
        <pt x="1607" y="270" on="1"/>
        <pt x="1717" y="262" on="1"/>
        <pt x="1811" y="241" on="0"/>
        <pt x="1811" y="339" on="1"/>
        <pt x="1820" y="433" on="0"/>
        <pt x="1827" y="586" on="1"/>
        <pt x="1899" y="573" on="0"/>
        <pt x="1996" y="515" on="1"/>
        <pt x="1952" y="352" on="0"/>
        <pt x="1944" y="309" on="1"/>
        <pt x="1918" y="122" on="0"/>
        <pt x="1738" y="141" on="1"/>
        <pt x="1557" y="141" on="1"/>
        <pt x="1376" y="136" on="0"/>
        <pt x="1372" y="314" on="1"/>
        <pt x="1363" y="928" on="1"/>
        <pt x="1089" y="900" on="1"/>
        <pt x="1087" y="739" on="0"/>
        <pt x="1072" y="627" on="1"/>
        <pt x="1019" y="285" on="0"/>
        <pt x="675" y="39" on="1"/>
        <pt x="636" y="107" on="0"/>
        <pt x="547" y="201" on="1"/>
        <pt x="883" y="353" on="0"/>
        <pt x="910" y="626" on="1"/>
        <pt x="904" y="747" on="0"/>
        <pt x="937" y="929" on="1"/>
        <pt x="576" y="903" on="1"/>
      </contour>
      <contour>
        <pt x="857" y="-47" on="1"/>
        <pt x="1301" y="-77" on="1"/>
        <pt x="1997" y="-68" on="1"/>
        <pt x="1992" y="-137" on="0"/>
        <pt x="1976" y="-223" on="1"/>
        <pt x="1302" y="-195" on="1"/>
        <pt x="858" y="-198" on="1"/>
        <pt x="503" y="-184" on="0"/>
        <pt x="330" y="27" on="1"/>
        <pt x="257" y="-31" on="0"/>
        <pt x="95" y="-244" on="1"/>
        <pt x="31" y="-75" on="1"/>
        <pt x="219" y="107" on="0"/>
        <pt x="261" y="193" on="1"/>
        <pt x="293" y="832" on="1"/>
        <pt x="53" y="833" on="1"/>
        <pt x="52" y="999" on="1"/>
        <pt x="416" y="994" on="1"/>
        <pt x="425" y="125" on="1"/>
        <pt x="545" y="-73" on="0"/>
      </contour>
      <contour>
        <pt x="683" y="1551" on="1"/>
        <pt x="1830" y="1563" on="1"/>
        <pt x="1833" y="1406" on="1"/>
        <pt x="680" y="1411" on="1"/>
      </contour>
      <contour>
        <pt x="283" y="1665" on="1"/>
        <pt x="391" y="1543" on="0"/>
        <pt x="563" y="1274" on="1"/>
        <pt x="405" y="1202" on="1"/>
        <pt x="235" y="1433" on="0"/>
        <pt x="160" y="1595" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 15 values pushed */
          2 56 57 33 49 56 36 49 63 44 45 45 63 36 4
          PUSHW[ ]	/* 4 values pushed */
          353 20 22 352
          PUSHB[ ]	/* 7 values pushed */
          32 32 30 26 28 28 24
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          30 57 33 61 16 61
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 3 values pushed */
          60 42 52
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 6 values pushed */
          47 60 58 36 2 13
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 9 values pushed */
          47 30 20 3 63 11 11 65 58
          PUSHW[ ]	/* 3 values pushed */
          -16 58 348
          PUSHB[ ]	/* 4 values pushed */
          64 63 63 58
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 22 values pushed */
          11 15 72 58 58 54 60 0 61 16 61 32 61 3 12 3 61 61 57 0 54 57
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 21 values pushed */
          89 28 15 26 1 16 3 26 32 17 26 72 26 26 18 13 11 11 6 18 6
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 3 values pushed */
          89 50 49
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 6 values pushed */
          89 22 3 33 0 33
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 32 values pushed */
          89 80 18 1 18 50 0 0 50 18 3 39 111 54 1 95 54 1 15 54 31 54 47 54 79
          54 4 11 3 54 44 45
          PUSHW[ ]	/* 1 value pushed */
          320
          PUSHB[ ]	/* 8 values pushed */
          89 44 44 39 36 35 39 35
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 11 values pushed */
          89 38 111 39 1 208 39 224 39 2 39
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01110]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC64" xMin="33" yMin="-232" xMax="2015" yMax="1706">
      <contour>
        <pt x="981" y="1381" on="1"/>
        <pt x="991" y="1008" on="1"/>
        <pt x="1997" y="1007" on="1"/>
        <pt x="1989" y="884" on="1"/>
        <pt x="1588" y="856" on="1"/>
        <pt x="1585" y="25" on="1"/>
        <pt x="1453" y="43" on="1"/>
        <pt x="1455" y="866" on="1"/>
        <pt x="992" y="881" on="1"/>
        <pt x="954" y="347" on="0"/>
        <pt x="702" y="29" on="1"/>
        <pt x="666" y="68" on="0"/>
        <pt x="587" y="123" on="1"/>
        <pt x="827" y="416" on="0"/>
        <pt x="841" y="939" on="1"/>
        <pt x="831" y="1514" on="1"/>
        <pt x="1333" y="1525" on="0"/>
        <pt x="1873" y="1626" on="1"/>
        <pt x="1928" y="1490" on="1"/>
        <pt x="1396" y="1402" on="0"/>
      </contour>
      <contour>
        <pt x="872" y="-60" on="1"/>
        <pt x="1453" y="-63" on="1"/>
        <pt x="2015" y="-24" on="1"/>
        <pt x="1977" y="-104" on="0"/>
        <pt x="1962" y="-201" on="1"/>
        <pt x="1391" y="-189" on="1"/>
        <pt x="859" y="-196" on="1"/>
        <pt x="491" y="-166" on="0"/>
        <pt x="332" y="24" on="1"/>
        <pt x="294" y="-14" on="0"/>
        <pt x="132" y="-232" on="1"/>
        <pt x="33" y="-53" on="1"/>
        <pt x="186" y="97" on="0"/>
        <pt x="284" y="173" on="1"/>
        <pt x="268" y="873" on="1"/>
        <pt x="37" y="865" on="1"/>
        <pt x="55" y="1012" on="1"/>
        <pt x="444" y="1007" on="1"/>
        <pt x="428" y="148" on="1"/>
        <pt x="594" y="-45" on="0"/>
      </contour>
      <contour>
        <pt x="266" y="1706" on="1"/>
        <pt x="379" y="1506" on="0"/>
        <pt x="560" y="1325" on="1"/>
        <pt x="419" y="1195" on="1"/>
        <pt x="244" y="1478" on="0"/>
        <pt x="147" y="1582" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 16 values pushed */
          3 35 3 22 35 45 30 31 31 45 22 17 18 18 8 1
          PUSHW[ ]	/* 6 values pushed */
          353 14 10 -16 10 348
          PUSHB[ ]	/* 4 values pushed */
          12 43 16 43
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 3 values pushed */
          42 28 38
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 5 values pushed */
          33 42 40 22 5
          PUSHW[ ]	/* 1 value pushed */
          354
          NPUSHB[ ]	/* 9 values pushed */
          33 12 14 3 45 6 6 47 40
          PUSHW[ ]	/* 3 values pushed */
          -16 40 346
          NPUSHB[ ]	/* 14 values pushed */
          64 45 38 33 36 31 28 30 30 25 22 21 25 21
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 13 values pushed */
          89 12 10 6 6 10 42 43 43 17 36 36 35
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 5 values pushed */
          89 4 8 1 8
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 28 values pushed */
          89 111 10 127 10 2 207 10 1 10 64 11 14 72 10 36 1 1 36 10 3 15 24 0 25
          1 10 25
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 17 values pushed */
          22 25 72 25 45 0 40 16 40 2 18 3 40 40 17 17 18
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 11 values pushed */
          89 0 17 1 28 3 17 17 15 15 0
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 12 values pushed */
          89 79 15 1 47 15 159 15 175 15 3 15
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC66" xMin="40" yMin="-279" xMax="2037" yMax="1704">
      <contour>
        <pt x="40" y="-94" on="1"/>
        <pt x="842" y="245" on="0"/>
        <pt x="931" y="994" on="1"/>
        <pt x="75" y="1010" on="1"/>
        <pt x="75" y="1164" on="1"/>
        <pt x="924" y="1136" on="1"/>
        <pt x="927" y="1399" on="0"/>
        <pt x="931" y="1704" on="1"/>
        <pt x="1121" y="1682" on="1"/>
        <pt x="1090" y="1412" on="0"/>
        <pt x="1115" y="1154" on="1"/>
        <pt x="1976" y="1168" on="1"/>
        <pt x="1986" y="981" on="1"/>
        <pt x="1099" y="992" on="1"/>
        <pt x="1225" y="182" on="0"/>
        <pt x="2037" y="-74" on="1"/>
        <pt x="1912" y="-165" on="0"/>
        <pt x="1874" y="-207" on="1"/>
        <pt x="1222" y="46" on="0"/>
        <pt x="1035" y="703" on="1"/>
        <pt x="872" y="95" on="0"/>
        <pt x="152" y="-279" on="1"/>
        <pt x="110" y="-197" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 17 values pushed */
          17 15 15 12 3 3 0 12 12 19 5 21 0 0 13 2 10
          PUSHW[ ]	/* 1 value pushed */
          357
          NPUSHB[ ]	/* 9 values pushed */
          64 5 5 24 23 19 3 21 0
          PUSHW[ ]	/* 4 values pushed */
          -16 21 0 317
          PUSHB[ ]	/* 5 values pushed */
          89 21 21 17 15
          PUSHW[ ]	/* 4 values pushed */
          -16 17 15 318
          NPUSHB[ ]	/* 34 values pushed */
          89 79 17 95 17 2 31 17 47 17 223 17 239 17 4 17 13 3 15 7 1 13 0 7 224
          7 2 14 3 7 7 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 23 values pushed */
          89 10 0 4 16 4 48 4 128 4 144 4 192 4 6 128 4 176 4 192 4 3 4
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC80" xMin="49" yMin="-253" xMax="1999" yMax="1694">
      <contour>
        <pt x="78" y="1414" on="1"/>
        <pt x="797" y="1385" on="1"/>
        <pt x="882" y="1561" on="0"/>
        <pt x="932" y="1694" on="1"/>
        <pt x="1109" y="1663" on="1"/>
        <pt x="1032" y="1507" on="0"/>
        <pt x="974" y="1386" on="1"/>
        <pt x="1999" y="1414" on="1"/>
        <pt x="1993" y="1236" on="1"/>
        <pt x="902" y="1241" on="1"/>
        <pt x="789" y="1024" on="0"/>
        <pt x="631" y="820" on="1"/>
        <pt x="1839" y="832" on="1"/>
        <pt x="1827" y="-250" on="1"/>
        <pt x="1674" y="-244" on="1"/>
        <pt x="1660" y="-85" on="1"/>
        <pt x="659" y="-92" on="1"/>
        <pt x="623" y="-248" on="1"/>
        <pt x="498" y="-253" on="1"/>
        <pt x="487" y="576" on="1"/>
        <pt x="319" y="394" on="0"/>
        <pt x="152" y="226" on="1"/>
        <pt x="133" y="247" on="0"/>
        <pt x="49" y="329" on="1"/>
        <pt x="448" y="720" on="0"/>
        <pt x="720" y="1254" on="1"/>
        <pt x="67" y="1235" on="1"/>
      </contour>
      <contour>
        <pt x="1644" y="673" on="1"/>
        <pt x="624" y="673" on="1"/>
        <pt x="634" y="52" on="1"/>
        <pt x="1651" y="69" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          26 8 3
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 4 values pushed */
          4 1 6 25
          PUSHW[ ]	/* 1 value pushed */
          358
          PUSHB[ ]	/* 4 values pushed */
          9 11 29 17
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 7 values pushed */
          18 4 9 21 8 30 13
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 7 values pushed */
          18 23 14 14 32 26 21
          PUSHW[ ]	/* 3 values pushed */
          -16 21 347
          NPUSHB[ ]	/* 32 values pushed */
          64 23 15 29 1 23 21 21 14 26 18 18 14 64 30 40 72 14 64 22 27 72 14 14 16
          15 16 1 11 3 29 16
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 5 values pushed */
          89 19 28 11 28
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 10 values pushed */
          89 11 11 0 29 64 12 15 72 29
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          16 40 72 29 9 26 0 26
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 20 values pushed */
          89 4 3 3 6 48 0 64 0 2 32 0 80 0 128 0 176 0 4 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          33 39 72 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          23 26 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEC92" xMin="38" yMin="-252" xMax="2034" yMax="1705">
      <contour>
        <pt x="59" y="889" on="1"/>
        <pt x="420" y="880" on="1"/>
        <pt x="390" y="1689" on="1"/>
        <pt x="587" y="1705" on="1"/>
        <pt x="570" y="880" on="1"/>
        <pt x="1987" y="897" on="1"/>
        <pt x="1975" y="716" on="1"/>
        <pt x="1088" y="739" on="1"/>
        <pt x="1353" y="177" on="0"/>
        <pt x="2034" y="-19" on="1"/>
        <pt x="1954" y="-129" on="0"/>
        <pt x="1908" y="-193" on="1"/>
        <pt x="1169" y="91" on="0"/>
        <pt x="938" y="723" on="1"/>
        <pt x="571" y="725" on="1"/>
        <pt x="565" y="19" on="1"/>
        <pt x="809" y="106" on="0"/>
        <pt x="1046" y="223" on="1"/>
        <pt x="1055" y="135" on="0"/>
        <pt x="1054" y="22" on="1"/>
        <pt x="822" y="-57" on="0"/>
        <pt x="609" y="-185" on="1"/>
        <pt x="542" y="-200" on="0"/>
        <pt x="464" y="-252" on="1"/>
        <pt x="355" y="-124" on="1"/>
        <pt x="387" y="-57" on="0"/>
        <pt x="408" y="35" on="1"/>
        <pt x="403" y="731" on="1"/>
        <pt x="38" y="711" on="1"/>
      </contour>
      <contour>
        <pt x="677" y="1133" on="1"/>
        <pt x="1199" y="1308" on="0"/>
        <pt x="1640" y="1632" on="1"/>
        <pt x="1747" y="1493" on="1"/>
        <pt x="1264" y="1175" on="0"/>
        <pt x="779" y="978" on="1"/>
        <pt x="747" y="1034" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 21 values pushed */
          19 19 11 15 31 32 32 6 15 23 24 24 26 28 6 28 6 11 9 9 7
          PUSHW[ ]	/* 3 values pushed */
          356 13 -16
          NPUSHB[ ]	/* 11 values pushed */
          13 13 37 26 34 29 29 28 4 1 15
          PUSHW[ ]	/* 1 value pushed */
          355
          PUSHB[ ]	/* 3 values pushed */
          64 26 29
          PUSHW[ ]	/* 4 values pushed */
          -16 34 29 316
          NPUSHB[ ]	/* 14 values pushed */
          89 15 34 1 11 3 34 34 32 11 32 16 31 32
          PUSHW[ ]	/* 1 value pushed */
          312
          PUSHB[ ]	/* 6 values pushed */
          89 15 23 17 17 19
          PUSHW[ ]	/* 1 value pushed */
          322
          PUSHB[ ]	/* 6 values pushed */
          89 14 7 28 0 28
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 36 values pushed */
          89 4 0 32 17 1 17 0 17 0 9 31 48 2 1 2 2 15 31 1 13 0 31 16 31
          64 31 80 31 96 31 5 16 3 31 24
          PUSHW[ ]	/* 4 values pushed */
          -16 23 24 317
          NPUSHB[ ]	/* 10 values pushed */
          89 15 23 1 16 3 23 23 11 9
          PUSHW[ ]	/* 4 values pushed */
          -16 11 9 319
          PUSHB[ ]	/* 7 values pushed */
          89 95 11 111 11 2 11
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECAC" xMin="57" yMin="-28" xMax="1997" yMax="1461">
      <contour>
        <pt x="215" y="1461" on="1"/>
        <pt x="1822" y="1433" on="1"/>
        <pt x="1851" y="1275" on="1"/>
        <pt x="196" y="1292" on="1"/>
      </contour>
      <contour>
        <pt x="57" y="146" on="1"/>
        <pt x="1962" y="146" on="1"/>
        <pt x="1997" y="-25" on="1"/>
        <pt x="66" y="-28" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 11 values pushed */
          2 3 2 3 7 6 6 9 7 4 7
          PUSHW[ ]	/* 1 value pushed */
          320
          PUSHB[ ]	/* 4 values pushed */
          89 4 0 3
          PUSHW[ ]	/* 1 value pushed */
          320
          PUSHB[ ]	/* 8 values pushed */
          89 31 0 1 175 0 1 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECAE" xMin="57" yMin="-238" xMax="2007" yMax="1532">
      <contour>
        <pt x="57" y="1529" on="1"/>
        <pt x="2007" y="1532" on="1"/>
        <pt x="1996" y="1392" on="1"/>
        <pt x="1020" y="1365" on="1"/>
        <pt x="1023" y="934" on="1"/>
        <pt x="1132" y="1054" on="1"/>
        <pt x="1559" y="801" on="0"/>
        <pt x="1866" y="580" on="1"/>
        <pt x="1754" y="410" on="1"/>
        <pt x="1459" y="649" on="0"/>
        <pt x="1039" y="903" on="1"/>
        <pt x="1023" y="-238" on="1"/>
        <pt x="852" y="-238" on="1"/>
        <pt x="861" y="1354" on="1"/>
        <pt x="68" y="1359" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 11 values pushed */
          8 7 7 2 14 2 2 16 14 4 11
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 66 values pushed */
          64 12 12 16 15 63 12 79 12 159 12 3 15 12 175 12 207 12 223 12 4 21 2 95 12
          111 12 127 12 3 15 12 47 12 63 12 79 12 111 12 159 12 175 12 207 12 223 12 9 26
          3 12 64 42 45 72 12 64 11 20 72 12 4 10 5 10
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 9 values pushed */
          89 5 16 5 5 0 12 7 7
          PUSHW[ ]	/* 4 values pushed */
          -16 8 7 318
          PUSHB[ ]	/* 6 values pushed */
          89 8 3 14 0 14
          PUSHW[ ]	/* 1 value pushed */
          319
          NPUSHB[ ]	/* 41 values pushed */
          89 47 0 63 0 111 0 127 0 143 0 5 47 0 111 0 127 0 175 0 191 0 239 0 255
          0 7 47 0 63 0 79 0 111 0 175 0 239 0 6 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECB6" xMin="50" yMin="-249" xMax="2006" yMax="1680">
      <contour>
        <pt x="492" y="1238" on="1"/>
        <pt x="649" y="1201" on="1"/>
        <pt x="446" y="617" on="0"/>
        <pt x="214" y="140" on="1"/>
        <pt x="150" y="214" on="0"/>
        <pt x="50" y="240" on="1"/>
        <pt x="251" y="617" on="0"/>
      </contour>
      <contour>
        <pt x="1362" y="1154" on="1"/>
        <pt x="1516" y="1251" on="1"/>
        <pt x="1778" y="764" on="0"/>
        <pt x="2006" y="283" on="1"/>
        <pt x="1849" y="163" on="1"/>
        <pt x="1608" y="737" on="0"/>
      </contour>
      <contour>
        <pt x="968" y="1680" on="1"/>
        <pt x="1150" y="1660" on="1"/>
        <pt x="1122" y="5" on="1"/>
        <pt x="1147" y="-244" on="0"/>
        <pt x="854" y="-249" on="1"/>
        <pt x="755" y="-226" on="0"/>
        <pt x="564" y="-227" on="1"/>
        <pt x="533" y="-156" on="0"/>
        <pt x="512" y="-47" on="1"/>
        <pt x="714" y="-61" on="0"/>
        <pt x="811" y="-59" on="1"/>
        <pt x="964" y="-70" on="0"/>
        <pt x="975" y="62" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 5 values pushed */
          21 21 25 3 8
          PUSHW[ ]	/* 7 values pushed */
          352 7 15 358 25 0 355
          PUSHB[ ]	/* 5 values pushed */
          1 7 25 5 11
          PUSHW[ ]	/* 1 value pushed */
          358
          PUSHB[ ]	/* 5 values pushed */
          1 10 10 27 3
          PUSHW[ ]	/* 3 values pushed */
          -16 3 355
          NPUSHB[ ]	/* 52 values pushed */
          64 5 5 3 10 11 7 8 1 0 63 3 1 143 3 207 3 223 3 3 3 64 11 14 72
          15 11 31 11 2 11 15 8 31 8 2 27 3 3 11 8 0 0 8 11 3 4 13 19 17
          23 17
          PUSHW[ ]	/* 1 value pushed */
          321
          NPUSHB[ ]	/* 22 values pushed */
          89 21 21 23 64 17 40 72 23 0 13 48 13 64 13 80 13 4 240 13 1 13
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          33 40 72 13
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECC6" xMin="11" yMin="-291" xMax="2035" yMax="1621">
      <contour>
        <pt x="353" y="1621" on="1"/>
        <pt x="1697" y="1620" on="1"/>
        <pt x="1702" y="807" on="1"/>
        <pt x="1565" y="804" on="1"/>
        <pt x="1546" y="870" on="1"/>
        <pt x="517" y="866" on="1"/>
        <pt x="501" y="780" on="1"/>
        <pt x="353" y="795" on="1"/>
      </contour>
      <contour>
        <pt x="443" y="499" on="1"/>
        <pt x="614" y="437" on="1"/>
        <pt x="585" y="365" on="0"/>
        <pt x="542" y="240" on="1"/>
        <pt x="671" y="20" on="0"/>
        <pt x="993" y="-60" on="1"/>
        <pt x="969" y="542" on="1"/>
        <pt x="64" y="569" on="1"/>
        <pt x="61" y="681" on="1"/>
        <pt x="2007" y="717" on="1"/>
        <pt x="2005" y="547" on="1"/>
        <pt x="1146" y="560" on="1"/>
        <pt x="1145" y="371" on="1"/>
        <pt x="1849" y="350" on="1"/>
        <pt x="1832" y="213" on="1"/>
        <pt x="1153" y="217" on="1"/>
        <pt x="1148" y="-41" on="1"/>
        <pt x="1533" y="-46" on="0"/>
        <pt x="2035" y="-33" on="1"/>
        <pt x="2010" y="-134" on="0"/>
        <pt x="1954" y="-208" on="1"/>
        <pt x="1401" y="-204" on="0"/>
        <pt x="1081" y="-216" on="1"/>
        <pt x="642" y="-186" on="0"/>
        <pt x="447" y="108" on="1"/>
        <pt x="302" y="-116" on="0"/>
        <pt x="110" y="-291" on="1"/>
        <pt x="52" y="-243" on="0"/>
        <pt x="11" y="-139" on="1"/>
        <pt x="332" y="54" on="0"/>
      </contour>
      <contour>
        <pt x="511" y="1009" on="1"/>
        <pt x="1562" y="1025" on="1"/>
        <pt x="1573" y="1202" on="1"/>
        <pt x="516" y="1165" on="1"/>
      </contour>
      <contour>
        <pt x="1563" y="1501" on="1"/>
        <pt x="482" y="1503" on="1"/>
        <pt x="482" y="1304" on="1"/>
        <pt x="1572" y="1328" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 16 values pushed */
          11 32 32 9 34 18 22 15 18 22 26 15 36 26 20 24
          PUSHW[ ]	/* 4 values pushed */
          354 13 8 352
          PUSHB[ ]	/* 7 values pushed */
          9 9 6 26 45 39 2
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 12 values pushed */
          13 7 3 3 47 7 34 36 36 44 38 6
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 8 values pushed */
          64 7 32 11 11 9 34 36
          PUSHW[ ]	/* 4 values pushed */
          -16 34 36 312
          NPUSHB[ ]	/* 15 values pushed */
          89 15 34 31 34 47 34 3 13 3 34 34 28 24 28
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 20 23
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 9 8
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 9 values pushed */
          11 15 72 8 8 19 15 16 15
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 9 values pushed */
          89 7 3 7 3 5 16 38 5
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 44 41
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 57 values pushed */
          89 15 20 1 128 20 144 20 2 15 16 79 16 2 128 16 144 16 2 0 38 1 11 95 44
          1 15 44 143 44 239 44 255 44 4 18 3 20 16 38 44 44 38 16 20 4 0 26 13 24
          64 19 39 72 24 0 43
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 19 values pushed */
          89 79 0 1 0 0 16 0 2 112 0 176 0 192 0 240 0 4 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          33 39 72 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          28 31 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECC8" xMin="25" yMin="701" xMax="2005" yMax="878">
      <contour>
        <pt x="25" y="878" on="1"/>
        <pt x="2005" y="850" on="1"/>
        <pt x="2001" y="703" on="1"/>
        <pt x="51" y="701" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 6 values pushed */
          2 2 5 3 0 3
          PUSHW[ ]	/* 1 value pushed */
          321
          PUSHB[ ]	/* 2 values pushed */
          89 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECE2" xMin="21" yMin="-225" xMax="2037" yMax="1637">
      <contour>
        <pt x="636" y="1600" on="1"/>
        <pt x="790" y="1598" on="1"/>
        <pt x="785" y="945" on="0"/>
        <pt x="626" y="559" on="1"/>
        <pt x="461" y="64" on="0"/>
        <pt x="131" y="-225" on="1"/>
        <pt x="98" y="-165" on="0"/>
        <pt x="21" y="-116" on="1"/>
        <pt x="321" y="179" on="0"/>
        <pt x="487" y="600" on="1"/>
        <pt x="613" y="1003" on="0"/>
      </contour>
      <contour>
        <pt x="1184" y="1605" on="1"/>
        <pt x="1341" y="1637" on="1"/>
        <pt x="1419" y="325" on="0"/>
        <pt x="2037" y="-53" on="1"/>
        <pt x="1944" y="-160" on="0"/>
        <pt x="1858" y="-214" on="1"/>
        <pt x="1255" y="232" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 4 values pushed */
          16 14 14 12
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 8 values pushed */
          11 11 19 0 5 7 7 1
          PUSHW[ ]	/* 1 value pushed */
          358
          PUSHB[ ]	/* 3 values pushed */
          64 0 14
          PUSHW[ ]	/* 4 values pushed */
          -16 16 14 319
          NPUSHB[ ]	/* 35 values pushed */
          89 47 16 63 16 2 16 0 0 63 11 79 11 143 11 3 15 11 31 11 175 11 191 11 255
          11 5 12 0 11 1 16 3 11 7
          PUSHW[ ]	/* 4 values pushed */
          -16 5 7 314
          NPUSHB[ ]	/* 18 values pushed */
          89 111 5 127 5 2 79 5 95 5 111 5 223 5 239 5 5 5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECE4" xMin="93" yMin="-234" xMax="1889" yMax="1555">
      <contour>
        <pt x="958" y="952" on="1"/>
        <pt x="1295" y="1170" on="0"/>
        <pt x="1611" y="1384" on="1"/>
        <pt x="93" y="1392" on="1"/>
        <pt x="123" y="1555" on="1"/>
        <pt x="1889" y="1553" on="1"/>
        <pt x="1868" y="1344" on="1"/>
        <pt x="1508" y="1118" on="0"/>
        <pt x="1147" y="894" on="1"/>
        <pt x="1153" y="133" on="1"/>
        <pt x="1171" y="-60" on="0"/>
        <pt x="1078" y="-152" on="1"/>
        <pt x="1004" y="-234" on="0"/>
        <pt x="818" y="-227" on="1"/>
        <pt x="701" y="-202" on="0"/>
        <pt x="457" y="-200" on="1"/>
        <pt x="452" y="-94" on="0"/>
        <pt x="451" y="-29" on="1"/>
        <pt x="656" y="-45" on="0"/>
        <pt x="796" y="-52" on="1"/>
        <pt x="984" y="-59" on="0"/>
        <pt x="955" y="140" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 9 values pushed */
          17 17 21 3 2 6 6 23 9
          PUSHW[ ]	/* 1 value pushed */
          358
          PUSHB[ ]	/* 7 values pushed */
          64 21 3 15 13 19 13
          PUSHW[ ]	/* 1 value pushed */
          321
          PUSHB[ ]	/* 8 values pushed */
          89 15 8 1 11 5 0 8
          PUSHW[ ]	/* 1 value pushed */
          302
          NPUSHB[ ]	/* 21 values pushed */
          89 0 0 19 4 17 17 0 19 16 19 32 19 3 22 3 19 6 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          319
          NPUSHB[ ]	/* 24 values pushed */
          89 47 4 127 4 191 4 255 4 4 47 4 63 4 79 4 111 4 175 4 239 4 6 4
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECF3" xMin="16" yMin="-150" xMax="2016" yMax="1716">
      <contour>
        <pt x="380" y="-1" on="1"/>
        <pt x="1105" y="-17" on="1"/>
        <pt x="1096" y="631" on="1"/>
        <pt x="597" y="633" on="1"/>
        <pt x="436" y="301" on="0"/>
        <pt x="124" y="-94" on="1"/>
        <pt x="87" y="-31" on="0"/>
        <pt x="16" y="26" on="1"/>
        <pt x="453" y="562" on="0"/>
        <pt x="620" y="1250" on="1"/>
        <pt x="78" y="1259" on="1"/>
        <pt x="93" y="1403" on="1"/>
        <pt x="666" y="1385" on="1"/>
        <pt x="687" y="1538" on="0"/>
        <pt x="730" y="1716" on="1"/>
        <pt x="900" y="1681" on="1"/>
        <pt x="887" y="1547" on="0"/>
        <pt x="856" y="1398" on="1"/>
        <pt x="1982" y="1388" on="1"/>
        <pt x="2016" y="1243" on="1"/>
        <pt x="795" y="1228" on="1"/>
        <pt x="775" y="1029" on="0"/>
        <pt x="680" y="819" on="1"/>
        <pt x="1861" y="813" on="1"/>
        <pt x="1859" y="667" on="1"/>
        <pt x="1280" y="661" on="1"/>
        <pt x="1254" y="11" on="1"/>
        <pt x="1989" y="-2" on="1"/>
        <pt x="1999" y="-150" on="1"/>
        <pt x="348" y="-131" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 18 values pushed */
          29 29 1 22 3 20 5 28 24 10 28 24 19 10 7 19 19 26
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 5 values pushed */
          1 1 31 9 14
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 9 values pushed */
          15 15 20 5 7 7 12 17 9
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 6 values pushed */
          64 20 25 3 22 3
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 17 values pushed */
          89 22 22 0 11 20 10 0 14 1 20 3 14 14 10 11 10
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 20 values pushed */
          89 17 0 11 32 11 48 11 96 11 112 11 176 11 192 11 7 14 3 11
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 5 values pushed */
          28 40 72 11 7
          PUSHW[ ]	/* 4 values pushed */
          -16 5 7 313
          PUSHB[ ]	/* 7 values pushed */
          89 5 5 29 0 0 29
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 3 values pushed */
          89 26 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniECFE" xMin="47" yMin="-219" xMax="1995" yMax="1692">
      <contour>
        <pt x="47" y="927" on="1"/>
        <pt x="756" y="988" on="1"/>
        <pt x="721" y="1676" on="1"/>
        <pt x="939" y="1692" on="1"/>
        <pt x="921" y="1028" on="1"/>
        <pt x="1989" y="1145" on="1"/>
        <pt x="1995" y="969" on="1"/>
        <pt x="903" y="877" on="1"/>
        <pt x="904" y="139" on="1"/>
        <pt x="930" y="-29" on="0"/>
        <pt x="1117" y="-54" on="1"/>
        <pt x="1518" y="-34" on="1"/>
        <pt x="1716" y="-27" on="0"/>
        <pt x="1755" y="96" on="1"/>
        <pt x="1764" y="213" on="0"/>
        <pt x="1796" y="405" on="1"/>
        <pt x="1876" y="387" on="0"/>
        <pt x="1957" y="353" on="1"/>
        <pt x="1942" y="127" on="0"/>
        <pt x="1922" y="9" on="1"/>
        <pt x="1869" y="-219" on="0"/>
        <pt x="1575" y="-198" on="1"/>
        <pt x="1074" y="-211" on="1"/>
        <pt x="736" y="-210" on="0"/>
        <pt x="723" y="104" on="1"/>
        <pt x="742" y="840" on="1"/>
        <pt x="61" y="753" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 4 values pushed */
          6 0 6 15
          PUSHW[ ]	/* 1 value pushed */
          357
          PUSHB[ ]	/* 7 values pushed */
          17 17 28 0 4 1 8
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 9 values pushed */
          64 24 4 1 1 0 5 26 0
          PUSHW[ ]	/* 1 value pushed */
          319
          NPUSHB[ ]	/* 11 values pushed */
          89 25 7 7 6 26 26 22 6 10 22
          PUSHW[ ]	/* 1 value pushed */
          320
          NPUSHB[ ]	/* 38 values pushed */
          89 17 15 15 10 16 2 32 2 80 2 112 2 4 0 2 48 2 64 2 80 2 128 2 144
          2 192 2 224 2 8 16 3 2 2 6 5 6
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 7 values pushed */
          89 80 5 1 5 16 5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED0F" xMin="14" yMin="-283" xMax="1935" yMax="1657">
      <contour>
        <pt x="1045" y="1439" on="1"/>
        <pt x="1935" y="1469" on="1"/>
        <pt x="1922" y="-200" on="1"/>
        <pt x="1771" y="-203" on="1"/>
        <pt x="1773" y="-3" on="1"/>
        <pt x="1210" y="-2" on="1"/>
        <pt x="1212" y="-215" on="1"/>
        <pt x="1047" y="-233" on="1"/>
      </contour>
      <contour>
        <pt x="1751" y="1289" on="1"/>
        <pt x="1208" y="1317" on="1"/>
        <pt x="1220" y="142" on="1"/>
        <pt x="1767" y="105" on="1"/>
      </contour>
      <contour>
        <pt x="14" y="287" on="1"/>
        <pt x="235" y="603" on="0"/>
        <pt x="382" y="953" on="1"/>
        <pt x="36" y="941" on="1"/>
        <pt x="30" y="1085" on="1"/>
        <pt x="432" y="1093" on="1"/>
        <pt x="426" y="1430" on="1"/>
        <pt x="250" y="1384" on="0"/>
        <pt x="106" y="1365" on="1"/>
        <pt x="75" y="1418" on="0"/>
        <pt x="66" y="1500" on="1"/>
        <pt x="474" y="1565" on="0"/>
        <pt x="861" y="1657" on="1"/>
        <pt x="894" y="1498" on="1"/>
        <pt x="756" y="1480" on="0"/>
        <pt x="584" y="1430" on="1"/>
        <pt x="559" y="1108" on="1"/>
        <pt x="952" y="1103" on="1"/>
        <pt x="952" y="959" on="1"/>
        <pt x="579" y="948" on="1"/>
        <pt x="567" y="686" on="1"/>
        <pt x="636" y="758" on="1"/>
        <pt x="789" y="654" on="0"/>
        <pt x="960" y="484" on="1"/>
        <pt x="853" y="380" on="1"/>
        <pt x="718" y="496" on="0"/>
        <pt x="573" y="635" on="1"/>
        <pt x="580" y="-275" on="1"/>
        <pt x="430" y="-283" on="1"/>
        <pt x="437" y="666" on="1"/>
        <pt x="316" y="370" on="0"/>
        <pt x="111" y="134" on="1"/>
        <pt x="87" y="186" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 2 values pushed */
          11 2
          PUSHW[ ]	/* 1 value pushed */
          354
          NPUSHB[ ]	/* 15 values pushed */
          3 36 35 24 25 35 30 25 25 30 35 3 39 10 6
          PUSHW[ ]	/* 1 value pushed */
          354
          NPUSHB[ ]	/* 9 values pushed */
          7 3 7 3 7 46 32 28 39
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 44 values pushed */
          40 64 20 22 22 40 43 12 15 15 12 12 17 14 40 223 40 1 123 40 1 40 64 28 34
          72 15 40 1 27 2 40 64 19 26 72 40 64 11 16 72 40 43 12
          PUSHW[ ]	/* 1 value pushed */
          320
          PUSHB[ ]	/* 6 values pushed */
          89 43 43 5 25 35
          PUSHW[ ]	/* 4 values pushed */
          -16 36 35 309
          NPUSHB[ ]	/* 13 values pushed */
          89 36 36 33 38 32 32 32 12 15 72 33 32
          PUSHW[ ]	/* 1 value pushed */
          304
          PUSHB[ ]	/* 7 values pushed */
          89 33 16 31 15 16 15
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 7 values pushed */
          89 28 16 16 20 20 22
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 8 values pushed */
          89 20 20 27 18 25 24 25
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 0 9
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 13 values pushed */
          89 48 0 1 0 0 176 24 1 144 24 1 24
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 37 values pushed */
          24 29 72 15 24 95 24 111 24 3 13 24 3 47 7 143 7 239 7 255 7 4 15 7 1
          16 3 7 64 28 32 72 7 10 64 5 10
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 5 values pushed */
          89 255 5 1 5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SMD[ ]	/* SetMinimumDistance */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[01101]	/* MoveDirectRelPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[00100]	/* MoveDirectRelPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED18" xMin="43" yMin="-144" xMax="2014" yMax="1686">
      <contour>
        <pt x="43" y="3" on="1"/>
        <pt x="823" y="27" on="1"/>
        <pt x="816" y="1686" on="1"/>
        <pt x="1034" y="1649" on="1"/>
        <pt x="1021" y="1070" on="1"/>
        <pt x="1846" y="1065" on="1"/>
        <pt x="1830" y="888" on="1"/>
        <pt x="1020" y="916" on="1"/>
        <pt x="1006" y="27" on="1"/>
        <pt x="2014" y="17" on="1"/>
        <pt x="1984" y="-144" on="1"/>
        <pt x="46" y="-141" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 10 values pushed */
          6 6 10 11 10 10 13 11 4 8
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 30 values pushed */
          64 1 1 13 12 15 2 175 2 2 12 48 2 144 2 2 0 2 16 2 32 2 96 2 176
          2 5 15 3 2
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          28 32 72 2 2 7 4 7
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 4 values pushed */
          89 4 0 11
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 3 values pushed */
          89 8 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED29" xMin="26" yMin="-276" xMax="2012" yMax="1723">
      <contour>
        <pt x="818" y="1603" on="1"/>
        <pt x="1824" y="1628" on="1"/>
        <pt x="1841" y="828" on="1"/>
        <pt x="1696" y="831" on="1"/>
        <pt x="1669" y="871" on="1"/>
        <pt x="970" y="872" on="1"/>
        <pt x="935" y="803" on="1"/>
        <pt x="815" y="806" on="1"/>
      </contour>
      <contour>
        <pt x="608" y="417" on="1"/>
        <pt x="1590" y="434" on="1"/>
        <pt x="1583" y="581" on="1"/>
        <pt x="684" y="593" on="1"/>
        <pt x="719" y="716" on="1"/>
        <pt x="1960" y="737" on="1"/>
        <pt x="1961" y="567" on="1"/>
        <pt x="1721" y="571" on="1"/>
        <pt x="1741" y="416" on="1"/>
        <pt x="2012" y="425" on="1"/>
        <pt x="2004" y="309" on="1"/>
        <pt x="1735" y="304" on="1"/>
        <pt x="1729" y="-4" on="1"/>
        <pt x="1712" y="-257" on="0"/>
        <pt x="1507" y="-249" on="1"/>
        <pt x="1361" y="-250" on="0"/>
        <pt x="1186" y="-236" on="1"/>
        <pt x="1174" y="-176" on="0"/>
        <pt x="1169" y="-73" on="1"/>
        <pt x="1279" y="-68" on="0"/>
        <pt x="1436" y="-86" on="1"/>
        <pt x="1588" y="-97" on="0"/>
        <pt x="1584" y="28" on="1"/>
        <pt x="1591" y="296" on="1"/>
        <pt x="634" y="290" on="1"/>
      </contour>
      <contour>
        <pt x="26" y="513" on="1"/>
        <pt x="283" y="774" on="0"/>
        <pt x="519" y="1193" on="1"/>
        <pt x="636" y="1122" on="1"/>
        <pt x="571" y="940" on="0"/>
        <pt x="482" y="831" on="1"/>
        <pt x="450" y="-253" on="1"/>
        <pt x="327" y="-276" on="1"/>
        <pt x="309" y="624" on="1"/>
        <pt x="203" y="494" on="0"/>
        <pt x="94" y="356" on="1"/>
        <pt x="72" y="445" on="0"/>
      </contour>
      <contour>
        <pt x="970" y="1015" on="1"/>
        <pt x="1704" y="1014" on="1"/>
        <pt x="1672" y="1174" on="1"/>
        <pt x="960" y="1183" on="1"/>
      </contour>
      <contour>
        <pt x="1698" y="1493" on="1"/>
        <pt x="966" y="1472" on="1"/>
        <pt x="948" y="1301" on="1"/>
        <pt x="1676" y="1319" on="1"/>
      </contour>
      <contour>
        <pt x="49" y="1131" on="1"/>
        <pt x="299" y="1351" on="0"/>
        <pt x="512" y="1723" on="1"/>
        <pt x="640" y="1608" on="1"/>
        <pt x="400" y="1242" on="0"/>
        <pt x="132" y="984" on="1"/>
        <pt x="68" y="1069" on="0"/>
      </contour>
      <contour>
        <pt x="824" y="193" on="1"/>
        <pt x="936" y="273" on="1"/>
        <pt x="1056" y="173" on="0"/>
        <pt x="1156" y="32" on="1"/>
        <pt x="1034" y="-63" on="1"/>
        <pt x="905" y="85" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 15 values pushed */
          14 26 11 32 14 18 2 11 32 60 39 18 16 9 20
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 5 values pushed */
          30 26 64 16 64
          PUSHW[ ]	/* 1 value pushed */
          347
          PUSHB[ ]	/* 4 values pushed */
          63 51 45 6
          PUSHW[ ]	/* 6 values pushed */
          351 7 61 -16 61 345
          PUSHB[ ]	/* 7 values pushed */
          60 58 53 53 55 16 55
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 4 values pushed */
          56 35 16 35
          PUSHW[ ]	/* 1 value pushed */
          350
          NPUSHB[ ]	/* 10 values pushed */
          36 36 56 63 3 39 18 52 46 2
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 13 values pushed */
          60 7 30 3 40 3 3 67 40 43 33 33 39
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 8 values pushed */
          64 40 41 38 36 43 43 33
          PUSHW[ ]	/* 7 values pushed */
          318 89 53 -16 58 53 314
          NPUSHB[ ]	/* 24 values pushed */
          89 43 58 43 58 22 50 63 15 64 191 64 2 11 4 64 64 32 40 40 24 22 28 22
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 26 values pushed */
          89 60 31 61 1 3 4 61 36 61 68 61 84 61 212 61 5 11 0 61 176 61 2 14 4
          61
          PUSHW[ ]	/* 1 value pushed */
          -32
          NPUSHB[ ]	/* 9 values pushed */
          17 20 72 61 61 19 32 8 32
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 17 values pushed */
          89 16 8 36 0 35 1 11 3 35 35 50 12 15 11 12 11
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 13 values pushed */
          89 3 3 15 7 1 16 3 7 7 5 45 5
          PUSHW[ ]	/* 1 value pushed */
          312
          PUSHB[ ]	/* 3 values pushed */
          89 51 48
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 114 values pushed */
          89 0 8 16 8 2 16 8 112 8 128 8 3 191 12 223 12 2 15 12 207 12 2 12 64
          30 33 72 16 12 128 12 2 63 45 79 45 95 45 127 45 191 45 207 45 223 45 7 111 45
          159 45 207 45 223 45 239 45 5 0 45 1 95 51 111 51 127 51 207 51 223 51 5 127 51
          159 51 239 51 255 51 4 3 8 12 45 51 51 45 12 8 4 28 0 0 26 1 11 4 26
          26 28 64 36 40 72 28 64 12 16 72 28 56 55
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          11 15 72 55 55 0 0 50
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 37 values pushed */
          89 63 0 79 0 2 0 0 48 0 64 0 80 0 128 0 144 0 160 0 192 0 208 0 224
          0 10 112 0 176 0 192 0 240 0 4 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED43" xMin="15" yMin="-291" xMax="2010" yMax="1528">
      <contour>
        <pt x="69" y="1510" on="1"/>
        <pt x="1961" y="1528" on="1"/>
        <pt x="1995" y="1371" on="1"/>
        <pt x="1232" y="1370" on="1"/>
        <pt x="1149" y="1213" on="0"/>
        <pt x="995" y="988" on="1"/>
        <pt x="1098" y="982" on="1"/>
        <pt x="1086" y="-291" on="1"/>
        <pt x="925" y="-262" on="1"/>
        <pt x="938" y="910" on="1"/>
        <pt x="571" y="504" on="0"/>
        <pt x="130" y="206" on="1"/>
        <pt x="86" y="265" on="0"/>
        <pt x="15" y="324" on="1"/>
        <pt x="626" y="725" on="0"/>
        <pt x="1042" y="1389" on="1"/>
        <pt x="69" y="1357" on="1"/>
      </contour>
      <contour>
        <pt x="1290" y="911" on="1"/>
        <pt x="1656" y="683" on="0"/>
        <pt x="2010" y="449" on="1"/>
        <pt x="1901" y="273" on="1"/>
        <pt x="1483" y="612" on="0"/>
        <pt x="1207" y="791" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 41 values pushed */
          12 21 1 5 10 1 63 15 1 79 15 1 10 15 1 15 3 16 20 19 19 2 17 22 22
          2 16 13 2 2 15 3 16 3 3 5 8 11 13 13 7
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 47 values pushed */
          64 8 8 24 23 111 8 127 8 239 8 3 255 8 1 2 15 8 31 8 47 8 3 19 3
          8 64 43 48 72 8 64 35 40 72 8 64 26 33 72 8 64 12 15 72 8 19
          PUSHW[ ]	/* 4 values pushed */
          -16 20 19 318
          PUSHB[ ]	/* 6 values pushed */
          89 20 22 16 17 22
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 31 values pushed */
          89 17 9 15 5 175 5 2 13 3 5 64 42 49 72 5 64 26 34 72 5 64 15 21 72
          5 17 5 13 0 13
          PUSHW[ ]	/* 4 values pushed */
          -16 11 13 315
          PUSHB[ ]	/* 8 values pushed */
          89 20 16 11 3 16 0 16
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 51 values pushed */
          89 31 0 47 0 63 0 3 31 0 47 0 95 0 111 0 127 0 159 0 175 0 191 0 223
          0 239 0 255 0 11 159 0 175 0 223 0 239 0 4 0 64 46 50 72 0 64 11 15 72
          0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED45" xMin="34" yMin="-240" xMax="2039" yMax="1697">
      <contour>
        <pt x="857" y="90" on="1"/>
        <pt x="770" y="-8" on="1"/>
        <pt x="625" y="84" on="0"/>
        <pt x="521" y="198" on="1"/>
        <pt x="387" y="-48" on="0"/>
        <pt x="144" y="-236" on="1"/>
        <pt x="81" y="-183" on="0"/>
        <pt x="46" y="-94" on="1"/>
        <pt x="262" y="70" on="0"/>
        <pt x="414" y="294" on="1"/>
        <pt x="268" y="438" on="0"/>
        <pt x="127" y="535" on="1"/>
        <pt x="171" y="792" on="0"/>
        <pt x="240" y="1129" on="1"/>
        <pt x="34" y="1118" on="1"/>
        <pt x="41" y="1286" on="1"/>
        <pt x="284" y="1265" on="1"/>
        <pt x="310" y="1477" on="0"/>
        <pt x="328" y="1697" on="1"/>
        <pt x="493" y="1680" on="1"/>
        <pt x="441" y="1442" on="0"/>
        <pt x="419" y="1274" on="1"/>
        <pt x="793" y="1294" on="1"/>
        <pt x="805" y="1159" on="1"/>
        <pt x="766" y="613" on="0"/>
        <pt x="618" y="300" on="1"/>
        <pt x="750" y="226" on="0"/>
      </contour>
      <contour>
        <pt x="822" y="812" on="1"/>
        <pt x="1354" y="812" on="1"/>
        <pt x="1363" y="1096" on="1"/>
        <pt x="1548" y="1297" on="0"/>
        <pt x="1727" y="1403" on="1"/>
        <pt x="864" y="1424" on="1"/>
        <pt x="860" y="1556" on="1"/>
        <pt x="1957" y="1572" on="1"/>
        <pt x="1923" y="1398" on="1"/>
        <pt x="1721" y="1229" on="0"/>
        <pt x="1497" y="1059" on="1"/>
        <pt x="1518" y="783" on="1"/>
        <pt x="2018" y="798" on="1"/>
        <pt x="2039" y="654" on="1"/>
        <pt x="1523" y="663" on="1"/>
        <pt x="1507" y="28" on="1"/>
        <pt x="1522" y="-208" on="0"/>
        <pt x="1238" y="-240" on="1"/>
        <pt x="1167" y="-233" on="0"/>
        <pt x="1005" y="-206" on="1"/>
        <pt x="966" y="-134" on="0"/>
        <pt x="972" y="-73" on="1"/>
        <pt x="1162" y="-76" on="0"/>
        <pt x="1226" y="-97" on="1"/>
        <pt x="1344" y="-92" on="0"/>
        <pt x="1368" y="34" on="1"/>
        <pt x="1336" y="640" on="1"/>
        <pt x="801" y="644" on="1"/>
      </contour>
      <contour>
        <pt x="640" y="1126" on="1"/>
        <pt x="419" y="1137" on="1"/>
        <pt x="329" y="747" on="0"/>
        <pt x="285" y="562" on="1"/>
        <pt x="398" y="513" on="0"/>
        <pt x="508" y="422" on="1"/>
        <pt x="631" y="678" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 38 values pushed */
          25 3 3 23 5 9 60 60 55 7 48 32 54 21 56 56 19 58 13 16 16 18 11 48 1
          0 0 14 5 7 7 52 14 40 14 38 28 42
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 4 values pushed */
          52 32 54 23
          PUSHW[ ]	/* 4 values pushed */
          353 55 18 354
          NPUSHB[ ]	/* 13 values pushed */
          19 52 55 31 11 40 31 19 35 35 63 14 58
          PUSHW[ ]	/* 4 values pushed */
          354 64 11 -16
          NPUSHB[ ]	/* 12 values pushed */
          11 3 9 9 1 14 60 25 25 0 56 0
          PUSHW[ ]	/* 4 values pushed */
          -16 1 0 311
          PUSHB[ ]	/* 8 values pushed */
          89 1 1 5 35 32 33 32
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 5 values pushed */
          89 46 44 50 44
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 8 values pushed */
          89 48 48 50 41 54 27 54
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 18 values pushed */
          89 38 27 31 37 1 3 15 37 47 37 63 37 3 11 4 29 37
          PUSHW[ ]	/* 1 value pushed */
          300
          PUSHB[ ]	/* 5 values pushed */
          89 56 14 15 14
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 29 values pushed */
          89 21 15 32 15 48 15 64 15 3 50 27 29 15 15 29 27 50 4 7 33 176 18 192 18
          208 18 3 18
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          23 28 72 18
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 21 values pushed */
          11 15 72 18 18 95 33 1 15 33 31 33 47 33 79 33 4 11 3 33 7
          PUSHW[ ]	/* 4 values pushed */
          -16 5 7 312
          NPUSHB[ ]	/* 25 values pushed */
          89 239 5 1 2 255 5 1 79 5 95 5 111 5 223 5 239 5 5 5 64 31 38 72 5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED5F" xMin="23" yMin="-282" xMax="2019" yMax="1707">
      <contour>
        <pt x="516" y="1411" on="1"/>
        <pt x="678" y="1336" on="1"/>
        <pt x="484" y="860" on="0"/>
        <pt x="196" y="468" on="1"/>
        <pt x="163" y="531" on="0"/>
        <pt x="53" y="580" on="1"/>
        <pt x="312" y="944" on="0"/>
      </contour>
      <contour>
        <pt x="1330" y="1376" on="1"/>
        <pt x="1434" y="1457" on="1"/>
        <pt x="1782" y="1135" on="0"/>
        <pt x="2019" y="791" on="1"/>
        <pt x="1888" y="687" on="1"/>
        <pt x="1607" y="1055" on="0"/>
      </contour>
      <contour>
        <pt x="936" y="1684" on="1"/>
        <pt x="1122" y="1707" on="1"/>
        <pt x="1127" y="437" on="1"/>
        <pt x="946" y="451" on="1"/>
      </contour>
      <contour>
        <pt x="1602" y="760" on="1"/>
        <pt x="1726" y="695" on="1"/>
        <pt x="1166" y="-72" on="0"/>
        <pt x="136" y="-282" on="1"/>
        <pt x="74" y="-187" on="0"/>
        <pt x="23" y="-124" on="1"/>
        <pt x="1069" y="72" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 7 values pushed */
          20 22 22 5 17 16 17
          NPUSHW[ ]	/* 12 values pushed */
          351 18 8 -16 8 347 7 15 356 16 0 355
          PUSHB[ ]	/* 7 values pushed */
          1 7 16 5 11 16 11
          PUSHW[ ]	/* 1 value pushed */
          351
          PUSHB[ ]	/* 6 values pushed */
          18 1 10 10 25 3
          PUSHW[ ]	/* 3 values pushed */
          -16 3 352
          NPUSHB[ ]	/* 20 values pushed */
          64 5 18 0 17 16 17 48 17 3 11 3 17 17 5 3 3 22 13 22
          PUSHW[ ]	/* 4 values pushed */
          -16 20 22 318
          NPUSHB[ ]	/* 47 values pushed */
          89 10 11 79 16 1 16 16 20 1 1 0 7 8 80 8 1 11 0 8 8 0 11 3 13
          47 20 159 20 2 20 64 12 21 72 20 0 13 1 80 13 176 13 240 13 3 13
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          33 37 72 13
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          28 31 72 13
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED71" xMin="28" yMin="-168" xMax="2035" yMax="1561">
      <contour>
        <pt x="36" y="-3" on="1"/>
        <pt x="487" y="-11" on="1"/>
        <pt x="627" y="753" on="1"/>
        <pt x="160" y="784" on="1"/>
        <pt x="149" y="936" on="1"/>
        <pt x="656" y="907" on="1"/>
        <pt x="729" y="1401" on="1"/>
        <pt x="103" y="1423" on="1"/>
        <pt x="125" y="1547" on="1"/>
        <pt x="1940" y="1561" on="1"/>
        <pt x="1930" y="1422" on="1"/>
        <pt x="876" y="1427" on="1"/>
        <pt x="829" y="928" on="1"/>
        <pt x="1706" y="912" on="1"/>
        <pt x="1689" y="6" on="1"/>
        <pt x="2022" y="-1" on="1"/>
        <pt x="2035" y="-168" on="1"/>
        <pt x="28" y="-161" on="1"/>
      </contour>
      <contour>
        <pt x="1530" y="754" on="1"/>
        <pt x="811" y="789" on="1"/>
        <pt x="679" y="-22" on="1"/>
        <pt x="1529" y="-4" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 22 values pushed */
          3 3 2 17 10 7 10 16 12 19 19 11 20 2 5 5 1 7 17 16 17 6
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 7 values pushed */
          11 16 11 11 20 16 14
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 5 values pushed */
          21 21 23 17 20
          PUSHW[ ]	/* 4 values pushed */
          356 64 1 -16
          PUSHB[ ]	/* 7 values pushed */
          1 19 3 12 4 4 3
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 7 values pushed */
          89 4 14 20 0 0 17
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 8 values pushed */
          89 4 8 0 11 7 8 7
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 19 values pushed */
          89 143 8 1 127 8 191 8 2 47 8 63 8 79 8 111 8 4 8
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED79" xMin="100" yMin="-246" xMax="1922" yMax="1707">
      <contour>
        <pt x="100" y="1378" on="1"/>
        <pt x="319" y="1366" on="1"/>
        <pt x="403" y="1571" on="0"/>
        <pt x="421" y="1695" on="1"/>
        <pt x="620" y="1663" on="1"/>
        <pt x="561" y="1491" on="0"/>
        <pt x="495" y="1380" on="1"/>
        <pt x="870" y="1375" on="1"/>
        <pt x="877" y="-206" on="1"/>
        <pt x="726" y="-205" on="1"/>
        <pt x="730" y="-75" on="1"/>
        <pt x="293" y="-72" on="1"/>
        <pt x="266" y="-246" on="1"/>
        <pt x="112" y="-229" on="1"/>
      </contour>
      <contour>
        <pt x="921" y="972" on="1"/>
        <pt x="1109" y="1262" on="0"/>
        <pt x="1219" y="1707" on="1"/>
        <pt x="1399" y="1641" on="1"/>
        <pt x="1357" y="1495" on="0"/>
        <pt x="1290" y="1371" on="1"/>
        <pt x="1922" y="1396" on="1"/>
        <pt x="1905" y="337" on="0"/>
        <pt x="1908" y="100" on="1"/>
        <pt x="1889" y="-224" on="0"/>
        <pt x="1553" y="-223" on="1"/>
        <pt x="1375" y="-224" on="0"/>
        <pt x="1181" y="-237" on="1"/>
        <pt x="1202" y="-134" on="0"/>
        <pt x="1167" y="-45" on="1"/>
        <pt x="1157" y="-55" on="1"/>
        <pt x="1372" y="-87" on="0"/>
        <pt x="1528" y="-62" on="1"/>
        <pt x="1726" y="-80" on="0"/>
        <pt x="1718" y="115" on="1"/>
        <pt x="1766" y="424" on="0"/>
        <pt x="1780" y="1212" on="1"/>
        <pt x="1219" y="1244" on="1"/>
        <pt x="1132" y="1019" on="0"/>
        <pt x="1035" y="897" on="1"/>
        <pt x="1017" y="917" on="0"/>
      </contour>
      <contour>
        <pt x="254" y="104" on="1"/>
        <pt x="722" y="95" on="1"/>
        <pt x="713" y="610" on="1"/>
        <pt x="293" y="592" on="1"/>
      </contour>
      <contour>
        <pt x="740" y="1209" on="1"/>
        <pt x="254" y="1233" on="1"/>
        <pt x="255" y="741" on="1"/>
        <pt x="716" y="727" on="1"/>
      </contour>
      <contour>
        <pt x="1092" y="815" on="1"/>
        <pt x="1193" y="898" on="1"/>
        <pt x="1427" y="636" on="0"/>
        <pt x="1560" y="476" on="1"/>
        <pt x="1407" y="371" on="1"/>
        <pt x="1276" y="571" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 7 values pushed */
          26 34 1 240 21 1 3
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 3 values pushed */
          4 4 6
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 5 values pushed */
          1 28 28 33 8
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 8 values pushed */
          9 47 41 9 19 36 17 38
          NPUSHW[ ]	/* 17 values pushed */
          -16 38 350 14 49 -16 49 346 48 20 355 35 22 355 33 1 -16
          NPUSHB[ ]	/* 16 values pushed */
          1 9 14 48 33 33 48 14 9 1 5 13 55 52 16 52
          PUSHW[ ]	/* 4 values pushed */
          352 51 16 356
          NPUSHB[ ]	/* 9 values pushed */
          17 51 17 51 17 23 46 40 12
          PUSHW[ ]	/* 1 value pushed */
          354
          NPUSHB[ ]	/* 25 values pushed */
          64 13 51 52 48 49 0 49 64 49 2 15 3 52 49 52 49 36 14 38 38 28 45 26 28
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 12 values pushed */
          89 26 26 25 31 9 9 13 13 25 31 25
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 3 values pushed */
          89 0 45
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 5 values pushed */
          89 6 0 46 43
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 3 values pushed */
          89 40 11
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 36 values pushed */
          89 11 46 1 12 68 40 84 40 100 40 3 0 46 40 40 46 0 3 19 159 31 1 2 15
          31 31 31 207 31 3 15 3 31 19 36
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 12 values pushed */
          89 17 16 16 4 244 3 1 36 3 1 3
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 15 values pushed */
          16 21 72 3 3 240 19 1 2 19 64 17 21 72 19
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDRP[10110]	/* MoveDirectRelPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED7B" xMin="16" yMin="-274" xMax="2038" yMax="1689">
      <contour>
        <pt x="747" y="1524" on="1"/>
        <pt x="1306" y="1534" on="0"/>
        <pt x="1908" y="1637" on="1"/>
        <pt x="1980" y="1490" on="1"/>
        <pt x="1688" y="1438" on="0"/>
        <pt x="1432" y="1426" on="1"/>
        <pt x="1446" y="1169" on="0"/>
        <pt x="1459" y="926" on="1"/>
        <pt x="1984" y="908" on="1"/>
        <pt x="1997" y="780" on="1"/>
        <pt x="1467" y="764" on="1"/>
        <pt x="1517" y="82" on="0"/>
        <pt x="1800" y="-53" on="1"/>
        <pt x="1842" y="-64" on="0"/>
        <pt x="1843" y="-12" on="1"/>
        <pt x="1856" y="100" on="0"/>
        <pt x="1908" y="273" on="1"/>
        <pt x="1969" y="244" on="0"/>
        <pt x="2038" y="238" on="1"/>
        <pt x="2012" y="59" on="0"/>
        <pt x="1976" y="-84" on="1"/>
        <pt x="1971" y="-221" on="0"/>
        <pt x="1848" y="-214" on="1"/>
        <pt x="1669" y="-220" on="0"/>
        <pt x="1570" y="-50" on="1"/>
        <pt x="1372" y="202" on="0"/>
        <pt x="1326" y="794" on="1"/>
        <pt x="884" y="770" on="1"/>
        <pt x="873" y="73" on="1"/>
        <pt x="1104" y="194" on="0"/>
        <pt x="1244" y="265" on="1"/>
        <pt x="1250" y="201" on="0"/>
        <pt x="1288" y="126" on="1"/>
        <pt x="1006" y="-20" on="0"/>
        <pt x="896" y="-126" on="1"/>
        <pt x="832" y="-149" on="0"/>
        <pt x="772" y="-194" on="1"/>
        <pt x="648" y="-62" on="1"/>
        <pt x="744" y="-2" on="0"/>
        <pt x="712" y="91" on="1"/>
      </contour>
      <contour>
        <pt x="16" y="780" on="1"/>
        <pt x="327" y="1174" on="0"/>
        <pt x="497" y="1689" on="1"/>
        <pt x="626" y="1657" on="1"/>
        <pt x="520" y="1360" on="0"/>
        <pt x="410" y="1150" on="1"/>
        <pt x="416" y="-267" on="1"/>
        <pt x="264" y="-249" on="1"/>
        <pt x="255" y="885" on="1"/>
        <pt x="158" y="750" on="0"/>
        <pt x="75" y="607" on="1"/>
        <pt x="44" y="691" on="0"/>
      </contour>
      <contour>
        <pt x="1289" y="1426" on="1"/>
        <pt x="1059" y="1423" on="0"/>
        <pt x="889" y="1389" on="1"/>
        <pt x="892" y="903" on="1"/>
        <pt x="1304" y="937" on="1"/>
        <pt x="1299" y="1101" on="0"/>
      </contour>
      <contour>
        <pt x="1137" y="-35" on="1"/>
        <pt x="1249" y="37" on="1"/>
        <pt x="1360" y="-64" on="0"/>
        <pt x="1452" y="-186" on="1"/>
        <pt x="1336" y="-274" on="1"/>
        <pt x="1238" y="-163" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 19 values pushed */
          2 3 3 18 5 30 32 32 52 59 36 37 37 39 46 9 62 16 62
          PUSHW[ ]	/* 1 value pushed */
          345
          PUSHB[ ]	/* 6 values pushed */
          61 10 7 26 56 5
          PUSHW[ ]	/* 6 values pushed */
          353 52 59 -16 59 343
          PUSHB[ ]	/* 3 values pushed */
          58 55 28
          PUSHW[ ]	/* 4 values pushed */
          352 39 42 351
          PUSHB[ ]	/* 6 values pushed */
          43 61 43 46 9 18
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 13 values pushed */
          39 58 52 3 47 16 16 65 47 50 40 40 46
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 17 values pushed */
          64 47 61 62 64 15 21 72 62 62 36 48 45 43 50 50 40
          PUSHW[ ]	/* 1 value pushed */
          320
          NPUSHB[ ]	/* 20 values pushed */
          89 50 50 36 54 58 0 28 16 28 2 11 3 28 59 59 32 36 30 32
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 9 values pushed */
          89 18 16 16 36 10 27 55 27
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 15 values pushed */
          89 7 55 30 64 13 16 72 30 55 30 55 37 0 37
          PUSHW[ ]	/* 4 values pushed */
          -16 36 37 312
          PUSHB[ ]	/* 3 values pushed */
          89 22 13
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 29 values pushed */
          89 22 22 36 15 47 31 47 2 26 3 47 64 17 21 72 47 47 36 64 16 21 72 36 52
          5 54 0 54
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 12 values pushed */
          89 43 0 42 1 19 3 42 42 0 2 3
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 36 values pushed */
          89 2 175 0 1 0 0 16 0 48 0 64 0 80 0 128 0 144 0 192 0 208 0 9 80
          0 176 0 192 0 208 0 240 0 5 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          MDRP[01110]	/* MoveDirectRelPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED8B" xMin="46" yMin="-294" xMax="2009" yMax="1601">
      <contour>
        <pt x="46" y="-146" on="1"/>
        <pt x="417" y="-92" on="0"/>
        <pt x="643" y="44" on="1"/>
        <pt x="442" y="164" on="0"/>
        <pt x="325" y="357" on="1"/>
        <pt x="399" y="455" on="1"/>
        <pt x="251" y="429" on="1"/>
        <pt x="274" y="1271" on="1"/>
        <pt x="962" y="1279" on="1"/>
        <pt x="952" y="1372" on="0"/>
        <pt x="958" y="1453" on="1"/>
        <pt x="87" y="1484" on="1"/>
        <pt x="93" y="1596" on="1"/>
        <pt x="1928" y="1601" on="1"/>
        <pt x="1955" y="1467" on="1"/>
        <pt x="1136" y="1446" on="1"/>
        <pt x="1105" y="1353" on="0"/>
        <pt x="1120" y="1292" on="1"/>
        <pt x="1772" y="1267" on="1"/>
        <pt x="1794" y="345" on="1"/>
        <pt x="1634" y="328" on="1"/>
        <pt x="1629" y="446" on="1"/>
        <pt x="1087" y="459" on="1"/>
        <pt x="1032" y="207" on="0"/>
        <pt x="922" y="72" on="1"/>
        <pt x="1320" y="-74" on="0"/>
        <pt x="2009" y="-87" on="1"/>
        <pt x="1976" y="-166" on="0"/>
        <pt x="1926" y="-239" on="1"/>
        <pt x="1135" y="-195" on="0"/>
        <pt x="768" y="-37" on="1"/>
        <pt x="564" y="-203" on="0"/>
        <pt x="108" y="-294" on="1"/>
        <pt x="90" y="-210" on="0"/>
      </contour>
      <contour>
        <pt x="416" y="934" on="1"/>
        <pt x="972" y="939" on="1"/>
        <pt x="953" y="1020" on="0"/>
        <pt x="950" y="1133" on="1"/>
        <pt x="409" y="1154" on="1"/>
      </contour>
      <contour>
        <pt x="948" y="785" on="1"/>
        <pt x="418" y="775" on="1"/>
        <pt x="399" y="582" on="1"/>
        <pt x="934" y="571" on="1"/>
        <pt x="940" y="666" on="0"/>
      </contour>
      <contour>
        <pt x="1100" y="587" on="1"/>
        <pt x="1648" y="584" on="1"/>
        <pt x="1621" y="805" on="1"/>
        <pt x="1118" y="801" on="1"/>
        <pt x="1123" y="682" on="0"/>
      </contour>
      <contour>
        <pt x="1628" y="1141" on="1"/>
        <pt x="1103" y="1140" on="1"/>
        <pt x="1127" y="1029" on="0"/>
        <pt x="1131" y="930" on="1"/>
        <pt x="1647" y="930" on="1"/>
      </contour>
      <contour>
        <pt x="767" y="125" on="1"/>
        <pt x="861" y="252" on="0"/>
        <pt x="907" y="442" on="1"/>
        <pt x="415" y="458" on="1"/>
        <pt x="581" y="254" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 5 values pushed */
          14 14 26 26 19
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 9 values pushed */
          20 53 45 20 2 54 54 0 56
          PUSHW[ ]	/* 1 value pushed */
          353
          NPUSHB[ ]	/* 11 values pushed */
          24 30 30 32 22 16 22 22 47 17 52
          PUSHW[ ]	/* 4 values pushed */
          353 35 44 352
          NPUSHB[ ]	/* 13 values pushed */
          42 42 8 10 10 35 20 35 20 35 60 6 57
          PUSHW[ ]	/* 3 values pushed */
          345 4 -16
          PUSHB[ ]	/* 5 values pushed */
          4 4 34 5 41
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 10 values pushed */
          6 64 32 0 0 6 11 11 6 0
          PUSHW[ ]	/* 4 values pushed */
          -16 32 0 314
          NPUSHB[ ]	/* 15 values pushed */
          89 15 32 1 27 3 32 32 30 2 2 28 6 26 28
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 5 values pushed */
          89 50 38 7 38
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 7 values pushed */
          89 17 7 47 40 34 40
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 16 values pushed */
          89 52 34 54 24 24 26 57 57 22 6 20 20 6 41 6
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 45 values pushed */
          89 44 41 112 7 128 7 144 7 3 31 7 1 63 34 1 15 34 239 34 2 15 7 34 41
          41 34 7 3 12 15 26 1 56 3 26 64 16 39 72 26 15 11 12 11
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 36 values pushed */
          89 240 12 1 0 12 48 12 64 12 80 12 128 12 144 12 192 12 208 12 224 12 9 176 12
          240 12 2 63 12 79 12 143 12 3 12
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED8D" xMin="17" yMin="-283" xMax="2014" yMax="1705">
      <contour>
        <pt x="681" y="-140" on="1"/>
        <pt x="1062" y="-62" on="0"/>
        <pt x="1253" y="47" on="1"/>
        <pt x="1083" y="99" on="0"/>
        <pt x="888" y="210" on="1"/>
        <pt x="972" y="313" on="0"/>
        <pt x="1022" y="439" on="1"/>
        <pt x="696" y="428" on="1"/>
        <pt x="707" y="553" on="1"/>
        <pt x="1124" y="545" on="1"/>
        <pt x="1156" y="652" on="0"/>
        <pt x="1210" y="749" on="1"/>
        <pt x="1291" y="699" on="1"/>
        <pt x="1296" y="1009" on="1"/>
        <pt x="1107" y="805" on="0"/>
        <pt x="809" y="667" on="1"/>
        <pt x="779" y="709" on="0"/>
        <pt x="699" y="786" on="1"/>
        <pt x="979" y="893" on="0"/>
        <pt x="1193" y="1096" on="1"/>
        <pt x="766" y="1083" on="1"/>
        <pt x="734" y="1245" on="1"/>
        <pt x="1296" y="1210" on="1"/>
        <pt x="1302" y="1409" on="1"/>
        <pt x="1087" y="1436" on="0"/>
        <pt x="844" y="1426" on="1"/>
        <pt x="838" y="1494" on="0"/>
        <pt x="823" y="1553" on="1"/>
        <pt x="1370" y="1564" on="0"/>
        <pt x="1870" y="1603" on="1"/>
        <pt x="1904" y="1460" on="1"/>
        <pt x="1656" y="1449" on="0"/>
        <pt x="1422" y="1448" on="1"/>
        <pt x="1451" y="1217" on="1"/>
        <pt x="1964" y="1247" on="1"/>
        <pt x="1984" y="1085" on="1"/>
        <pt x="1523" y="1113" on="1"/>
        <pt x="1736" y="871" on="0"/>
        <pt x="2008" y="810" on="1"/>
        <pt x="1949" y="723" on="0"/>
        <pt x="1903" y="685" on="1"/>
        <pt x="1635" y="793" on="0"/>
        <pt x="1441" y="1038" on="1"/>
        <pt x="1425" y="694" on="1"/>
        <pt x="1298" y="710" on="1"/>
        <pt x="1341" y="672" on="1"/>
        <pt x="1323" y="607" on="0"/>
        <pt x="1303" y="552" on="1"/>
        <pt x="2014" y="559" on="1"/>
        <pt x="1993" y="441" on="1"/>
        <pt x="1741" y="410" on="1"/>
        <pt x="1659" y="198" on="0"/>
        <pt x="1508" y="76" on="1"/>
        <pt x="1768" y="-25" on="0"/>
        <pt x="1981" y="-142" on="1"/>
        <pt x="1916" y="-282" on="1"/>
        <pt x="1657" y="-172" on="0"/>
        <pt x="1402" y="-27" on="1"/>
        <pt x="1173" y="-176" on="0"/>
        <pt x="775" y="-280" on="1"/>
        <pt x="736" y="-190" on="0"/>
      </contour>
      <contour>
        <pt x="51" y="822" on="1"/>
        <pt x="339" y="838" on="1"/>
        <pt x="359" y="1275" on="1"/>
        <pt x="274" y="1276" on="1"/>
        <pt x="222" y="1138" on="0"/>
        <pt x="162" y="984" on="1"/>
        <pt x="67" y="1011" on="0"/>
        <pt x="37" y="1040" on="1"/>
        <pt x="155" y="1337" on="0"/>
        <pt x="238" y="1705" on="1"/>
        <pt x="360" y="1679" on="1"/>
        <pt x="359" y="1519" on="0"/>
        <pt x="288" y="1406" on="1"/>
        <pt x="680" y="1414" on="1"/>
        <pt x="682" y="1265" on="1"/>
        <pt x="496" y="1248" on="1"/>
        <pt x="474" y="822" on="1"/>
        <pt x="497" y="821" on="1"/>
        <pt x="702" y="810" on="1"/>
        <pt x="721" y="669" on="1"/>
        <pt x="464" y="663" on="1"/>
        <pt x="479" y="552" on="0"/>
        <pt x="477" y="462" on="1"/>
        <pt x="660" y="260" on="0"/>
        <pt x="807" y="82" on="1"/>
        <pt x="649" y="-3" on="1"/>
        <pt x="557" y="130" on="0"/>
        <pt x="420" y="294" on="1"/>
        <pt x="383" y="28" on="0"/>
        <pt x="153" y="-283" on="1"/>
        <pt x="83" y="-185" on="0"/>
        <pt x="17" y="-135" on="1"/>
        <pt x="337" y="179" on="0"/>
        <pt x="328" y="684" on="1"/>
        <pt x="40" y="666" on="1"/>
      </contour>
      <contour>
        <pt x="1078" y="236" on="1"/>
        <pt x="1235" y="200" on="0"/>
        <pt x="1366" y="104" on="1"/>
        <pt x="1522" y="251" on="0"/>
        <pt x="1593" y="425" on="1"/>
        <pt x="1188" y="430" on="1"/>
        <pt x="1151" y="329" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 64 values pushed */
          52 57 57 50 59 2 98 98 100 0 35 30 27 20 75 80 83 95 35 40 49 38 30 50 55
          54 54 50 44 47 47 101 101 45 96 6 9 9 11 4 27 75 12 78 20 15 15 7 80 3
          17 17 11 78 90 92 92 86 68 73 64 71 66 11
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 3 values pushed */
          45 45 36
          PUSHW[ ]	/* 1 value pushed */
          -16
          PUSHB[ ]	/* 7 values pushed */
          19 16 36 33 22 19 43
          PUSHW[ ]	/* 1 value pushed */
          351
          PUSHB[ ]	/* 3 values pushed */
          12 96 4
          PUSHW[ ]	/* 1 value pushed */
          -16
          PUSHB[ ]	/* 7 values pushed */
          4 59 0 0 86 16 86
          PUSHW[ ]	/* 4 values pushed */
          348 85 70 351
          PUSHB[ ]	/* 7 values pushed */
          71 88 83 71 3 94 78
          PUSHW[ ]	/* 1 value pushed */
          350
          NPUSHB[ ]	/* 10 values pushed */
          62 62 4 12 3 68 40 38 38 100
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 8 values pushed */
          85 50 16 50 50 104 95 66
          PUSHW[ ]	/* 1 value pushed */
          349
          NPUSHB[ ]	/* 190 values pushed */
          64 68 87 57 1 38 57 70 57 102 57 3 41 23 1 234 31 1 3 172 30 1 2 159 30
          239 30 2 126 30 1 142 30 206 30 2 28 30 44 30 108 30 3 76 30 220 30 2 123 30
          187 30 2 10 30 90 30 2 42 30 58 30 106 30 3 57 30 73 30 2 249 30 1 88 30
          1 42 32 234 32 2 89 32 217 32 2 8 32 1 104 32 248 32 2 47 29 1 94 29 110
          29 2 77 29 173 29 237 29 3 28 29 60 29 2 124 29 140 29 156 29 204 29 220 29 252
          29 6 11 29 1 59 29 187 29 2 42 29 90 29 122 29 3 73 29 105 29 2 7 29 1
          9 98 52 52 54 101 88 83 83 90 81 85 86 86 0 7 57 2 2 55 7 44 45 45 11
          11 8 20 68 66 66 61 64 71 0 70 1 50 3 70
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          36 44 72 70
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 7 values pushed */
          22 27 72 70 70 27 0
          PUSHW[ ]	/* 4 values pushed */
          -16 59 0 316
          PUSHB[ ]	/* 5 values pushed */
          89 59 59 55 54
          PUSHW[ ]	/* 4 values pushed */
          -16 55 54 316
          PUSHB[ ]	/* 3 values pushed */
          89 55 12
          PUSHW[ ]	/* 1 value pushed */
          -16
          PUSHB[ ]	/* 8 values pushed */
          50 101 7 47 12 8 8 7
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 3 values pushed */
          89 8 17
          PUSHW[ ]	/* 4 values pushed */
          -16 15 17 316
          PUSHB[ ]	/* 5 values pushed */
          89 15 15 40 38
          PUSHW[ ]	/* 4 values pushed */
          -16 40 38 316
          PUSHB[ ]	/* 8 values pushed */
          89 40 81 95 78 61 61 95
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 15 values pushed */
          89 61 42 13 16 2 36 13 42 3 20 33 21 21 20
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 6 values pushed */
          89 21 76 64 73 64
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 10 values pushed */
          89 73 73 21 61 8 4 92 27 92
          PUSHW[ ]	/* 4 values pushed */
          -16 90 92 316
          NPUSHB[ ]	/* 37 values pushed */
          89 40 25 55 127 90 143 90 2 15 90 31 90 2 20 90 64 12 16 72 0 90 16 90 32
          90 3 48 3 90 23 32 25 29 27 27 25
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 18 values pushed */
          89 143 27 1 127 27 191 27 255 27 3 175 27 1 80 27 1 27
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDRP[01101]	/* MoveDirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniED95" xMin="30" yMin="-278" xMax="1999" yMax="1732">
      <contour>
        <pt x="61" y="967" on="1"/>
        <pt x="595" y="974" on="1"/>
        <pt x="635" y="1031" on="0"/>
        <pt x="657" y="1104" on="1"/>
        <pt x="228" y="1113" on="1"/>
        <pt x="242" y="1245" on="1"/>
        <pt x="726" y="1250" on="1"/>
        <pt x="741" y="1283" on="0"/>
        <pt x="783" y="1357" on="1"/>
        <pt x="135" y="1348" on="1"/>
        <pt x="118" y="1493" on="1"/>
        <pt x="677" y="1462" on="1"/>
        <pt x="624" y="1579" on="0"/>
        <pt x="540" y="1659" on="1"/>
        <pt x="672" y="1732" on="1"/>
        <pt x="761" y="1616" on="0"/>
        <pt x="844" y="1545" on="1"/>
        <pt x="747" y="1489" on="1"/>
        <pt x="1194" y="1459" on="1"/>
        <pt x="1298" y="1602" on="0"/>
        <pt x="1384" y="1700" on="1"/>
        <pt x="1520" y="1637" on="1"/>
        <pt x="1478" y="1556" on="0"/>
        <pt x="1375" y="1497" on="1"/>
        <pt x="1949" y="1484" on="1"/>
        <pt x="1947" y="1359" on="1"/>
        <pt x="922" y="1338" on="1"/>
        <pt x="904" y="1291" on="0"/>
        <pt x="895" y="1247" on="1"/>
        <pt x="1802" y="1238" on="1"/>
        <pt x="1804" y="1104" on="1"/>
        <pt x="812" y="1127" on="1"/>
        <pt x="786" y="1022" on="0"/>
        <pt x="772" y="958" on="1"/>
        <pt x="1961" y="974" on="1"/>
        <pt x="1999" y="853" on="1"/>
        <pt x="700" y="858" on="1"/>
        <pt x="664" y="777" on="0"/>
        <pt x="607" y="733" on="1"/>
        <pt x="1780" y="724" on="1"/>
        <pt x="1758" y="-278" on="1"/>
        <pt x="1623" y="-248" on="1"/>
        <pt x="1632" y="-163" on="1"/>
        <pt x="606" y="-163" on="1"/>
        <pt x="627" y="-273" on="1"/>
        <pt x="465" y="-246" on="1"/>
        <pt x="479" y="508" on="1"/>
        <pt x="310" y="349" on="0"/>
        <pt x="148" y="192" on="1"/>
        <pt x="74" y="236" on="0"/>
        <pt x="30" y="281" on="1"/>
        <pt x="326" y="523" on="0"/>
        <pt x="539" y="848" on="1"/>
        <pt x="51" y="835" on="1"/>
      </contour>
      <contour>
        <pt x="617" y="-24" on="1"/>
        <pt x="1641" y="-39" on="1"/>
        <pt x="1638" y="110" on="1"/>
        <pt x="596" y="103" on="1"/>
      </contour>
      <contour>
        <pt x="1637" y="596" on="1"/>
        <pt x="627" y="610" on="1"/>
        <pt x="620" y="451" on="1"/>
        <pt x="1643" y="480" on="1"/>
      </contour>
      <contour>
        <pt x="614" y="202" on="1"/>
        <pt x="1621" y="216" on="1"/>
        <pt x="1637" y="357" on="1"/>
        <pt x="598" y="327" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 22 values pushed */
          28 31 31 26 33 25 30 16 4 9 53 25 35 17 11 11 8 14 35 20 16 20
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 3 values pushed */
          21 21 23
          PUSHW[ ]	/* 3 values pushed */
          358 18 -16
          PUSHB[ ]	/* 3 values pushed */
          18 16 8
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 6 values pushed */
          26 16 26 1 33 52
          PUSHW[ ]	/* 6 values pushed */
          355 36 14 -16 14 346
          PUSHB[ ]	/* 8 values pushed */
          13 13 54 62 60 38 4 44
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 11 values pushed */
          45 26 36 48 35 30 55 63 61 3 40
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 11 values pushed */
          18 45 50 41 41 67 53 9 4 3 48
          PUSHW[ ]	/* 3 values pushed */
          -16 48 346
          NPUSHB[ ]	/* 26 values pushed */
          64 50 50 48 48 41 53 45 45 207 41 1 15 41 47 41 79 41 3 11 3 41 41 43 54
          43
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 62 57
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 60 65
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 20 values pushed */
          89 57 46 1 4 46 20 46 2 12 0 46 1 14 2 46 59 60 38 59
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 5 values pushed */
          89 36 53 0 53
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 7 values pushed */
          89 33 0 31 4 5 4
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 107 values pushed */
          89 28 5 47 62 1 11 62 27 62 155 62 3 59 62 1 62 64 17 21 72 4 62 20 62
          2 11 60 27 60 171 60 187 60 203 60 5 59 60 1 60 64 17 21 72 116 60 132 60 2
          4 60 20 60 36 60 3 15 38 31 38 2 175 38 1 2 47 38 1 38 64 36 39 72 38
          64 17 20 72 112 38 128 38 2 15 0 31 0 2 0 64 36 39 72 0 64 18 21 72 80
          0 96 0 128 0 3 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 64 values pushed */
          11 14 72 47 5 207 5 2 128 5 1 0 5 16 5 48 5 3 11 62 60 38 0 5 5
          0 38 60 62 5 15 54 47 54 2 12 54 64 33 40 72 54 21 20 20 10 13 32 14 48
          14 2 0 14 144 14 160 14 176 14 4 13 3 14
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 10 values pushed */
          15 18 72 14 14 10 26 9 10 9
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 46 values pushed */
          89 23 17 111 10 127 10 175 10 3 223 10 1 2 143 10 159 10 2 79 10 111 10 143 10
          159 10 239 10 255 10 6 10 64 36 40 72 10 64 27 30 72 80 10 1 10
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[0]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEDA7" xMin="71" yMin="-305" xMax="1938" yMax="1718">
      <contour>
        <pt x="1191" y="878" on="1"/>
        <pt x="1378" y="880" on="1"/>
        <pt x="1312" y="813" on="0"/>
        <pt x="1183" y="727" on="1"/>
        <pt x="1931" y="738" on="1"/>
        <pt x="1938" y="570" on="1"/>
        <pt x="1301" y="-108" on="0"/>
        <pt x="190" y="-305" on="1"/>
        <pt x="187" y="-201" on="0"/>
        <pt x="137" y="-121" on="1"/>
        <pt x="587" y="-67" on="0"/>
        <pt x="987" y="86" on="1"/>
        <pt x="937" y="170" on="0"/>
        <pt x="826" y="288" on="1"/>
        <pt x="946" y="376" on="1"/>
        <pt x="1048" y="279" on="0"/>
        <pt x="1119" y="180" on="1"/>
        <pt x="1456" y="323" on="0"/>
        <pt x="1721" y="574" on="1"/>
        <pt x="1032" y="588" on="1"/>
        <pt x="681" y="341" on="0"/>
        <pt x="279" y="141" on="1"/>
        <pt x="249" y="195" on="0"/>
        <pt x="200" y="300" on="1"/>
        <pt x="750" y="529" on="0"/>
      </contour>
      <contour>
        <pt x="868" y="1692" on="1"/>
        <pt x="1095" y="1718" on="1"/>
        <pt x="972" y="1576" on="0"/>
        <pt x="865" y="1500" on="1"/>
        <pt x="1810" y="1478" on="1"/>
        <pt x="1804" y="1361" on="1"/>
        <pt x="1153" y="792" on="0"/>
        <pt x="148" y="545" on="1"/>
        <pt x="95" y="606" on="0"/>
        <pt x="71" y="670" on="1"/>
        <pt x="464" y="798" on="0"/>
        <pt x="804" y="934" on="1"/>
        <pt x="714" y="1016" on="0"/>
        <pt x="594" y="1120" on="1"/>
        <pt x="705" y="1202" on="1"/>
        <pt x="826" y="1082" on="0"/>
        <pt x="947" y="996" on="1"/>
        <pt x="1319" y="1127" on="0"/>
        <pt x="1567" y="1348" on="1"/>
        <pt x="732" y="1364" on="1"/>
        <pt x="497" y="1166" on="0"/>
        <pt x="232" y="1003" on="1"/>
        <pt x="203" y="1081" on="0"/>
        <pt x="117" y="1123" on="1"/>
        <pt x="588" y="1391" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 6 values pushed */
          11 16 16 18 9 14
          PUSHW[ ]	/* 3 values pushed */
          -16 14 346
          NPUSHB[ ]	/* 12 values pushed */
          13 13 18 38 18 7 9 9 5 34 28 25
          PUSHW[ ]	/* 1 value pushed */
          362
          PUSHB[ ]	/* 5 values pushed */
          26 3 19 21 0
          PUSHW[ ]	/* 1 value pushed */
          362
          NPUSHB[ ]	/* 24 values pushed */
          1 36 41 41 43 34 43 30 26 16 1 16 26 1 30 30 1 26 3 5 5 51 44 39
          PUSHW[ ]	/* 3 values pushed */
          -16 39 344
          NPUSHB[ ]	/* 20 values pushed */
          38 64 46 48 48 38 21 23 23 32 32 34 34 38 41 36 36 34 44 34
          PUSHW[ ]	/* 4 values pushed */
          -16 32 34 314
          NPUSHB[ ]	/* 10 values pushed */
          89 15 32 47 32 2 13 3 32 48
          PUSHW[ ]	/* 4 values pushed */
          -16 46 48 313
          NPUSHB[ ]	/* 13 values pushed */
          89 15 46 1 15 3 46 46 28 30 44 28 44
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 45 values pushed */
          89 38 64 39 160 39 176 39 3 39 39 28 32 25 1 25 25 0 28 16 28 80 28 3 96
          28 192 28 208 28 3 48 28 112 28 176 28 3 15 28 1 13 3 28 23
          PUSHW[ ]	/* 4 values pushed */
          -16 21 23 313
          NPUSHB[ ]	/* 19 values pushed */
          89 15 21 31 21 47 21 3 13 3 21 13 14 16 11 11 9 19 9
          PUSHW[ ]	/* 4 values pushed */
          -16 7 9 316
          NPUSHB[ ]	/* 23 values pushed */
          89 159 7 1 7 64 11 15 72 7 5 19 96 0 160 0 2 0 0 1 24 3 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          17 21 72 0 0 19 3 19
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 7 values pushed */
          89 112 3 240 3 2 3
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEDC1" xMin="12" yMin="-265" xMax="2007" yMax="1703">
      <contour>
        <pt x="850" y="1238" on="1"/>
        <pt x="1876" y="1216" on="1"/>
        <pt x="1878" y="502" on="1"/>
        <pt x="1720" y="498" on="1"/>
        <pt x="1738" y="542" on="1"/>
        <pt x="1026" y="555" on="1"/>
        <pt x="1002" y="494" on="1"/>
        <pt x="861" y="501" on="1"/>
      </contour>
      <contour>
        <pt x="34" y="845" on="1"/>
        <pt x="366" y="831" on="1"/>
        <pt x="378" y="1261" on="1"/>
        <pt x="258" y="1257" on="1"/>
        <pt x="213" y="1108" on="0"/>
        <pt x="171" y="1004" on="1"/>
        <pt x="72" y="1037" on="0"/>
        <pt x="12" y="1056" on="1"/>
        <pt x="132" y="1345" on="0"/>
        <pt x="237" y="1703" on="1"/>
        <pt x="373" y="1669" on="1"/>
        <pt x="353" y="1539" on="0"/>
        <pt x="320" y="1407" on="1"/>
        <pt x="753" y="1391" on="1"/>
        <pt x="752" y="1256" on="1"/>
        <pt x="522" y="1270" on="1"/>
        <pt x="495" y="829" on="1"/>
        <pt x="808" y="837" on="1"/>
        <pt x="788" y="702" on="1"/>
        <pt x="521" y="685" on="1"/>
        <pt x="506" y="573" on="0"/>
        <pt x="486" y="461" on="1"/>
        <pt x="598" y="523" on="1"/>
        <pt x="709" y="324" on="0"/>
        <pt x="833" y="82" on="1"/>
        <pt x="690" y="3" on="1"/>
        <pt x="591" y="227" on="0"/>
        <pt x="484" y="422" on="1"/>
        <pt x="401" y="-24" on="0"/>
        <pt x="129" y="-265" on="1"/>
        <pt x="93" y="-225" on="0"/>
        <pt x="14" y="-148" on="1"/>
        <pt x="343" y="176" on="0"/>
        <pt x="354" y="706" on="1"/>
        <pt x="27" y="694" on="1"/>
      </contour>
      <contour>
        <pt x="1706" y="1078" on="1"/>
        <pt x="1025" y="1067" on="1"/>
        <pt x="1017" y="701" on="1"/>
        <pt x="1708" y="697" on="1"/>
      </contour>
      <contour>
        <pt x="700" y="-66" on="1"/>
        <pt x="1417" y="-40" on="1"/>
        <pt x="1572" y="198" on="0"/>
        <pt x="1650" y="433" on="1"/>
        <pt x="1817" y="360" on="1"/>
        <pt x="1692" y="161" on="0"/>
        <pt x="1601" y="-38" on="1"/>
        <pt x="1988" y="-55" on="1"/>
        <pt x="2007" y="-194" on="1"/>
        <pt x="699" y="-181" on="1"/>
      </contour>
      <contour>
        <pt x="781" y="1584" on="1"/>
        <pt x="1984" y="1586" on="1"/>
        <pt x="1966" y="1445" on="1"/>
        <pt x="794" y="1444" on="1"/>
      </contour>
      <contour>
        <pt x="924" y="394" on="1"/>
        <pt x="1082" y="435" on="1"/>
        <pt x="1190" y="244" on="0"/>
        <pt x="1265" y="80" on="1"/>
        <pt x="1132" y="-21" on="1"/>
        <pt x="1047" y="201" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 30 values pushed */
          29 35 35 27 37 59 26 60 22 56 42 59 55 22 60 26 3 7 24 37 39 39 33 15 20
          11 18 13 55 50
          PUSHW[ ]	/* 6 values pushed */
          355 51 53 355 48 -16
          PUSHB[ ]	/* 4 values pushed */
          48 65 16 65
          PUSHW[ ]	/* 6 values pushed */
          352 64 62 -16 62 349
          PUSHB[ ]	/* 3 values pushed */
          61 45 6
          PUSHW[ ]	/* 1 value pushed */
          351
          PUSHB[ ]	/* 5 values pushed */
          7 56 33 16 33
          PUSHW[ ]	/* 4 values pushed */
          351 32 17 351
          PUSHB[ ]	/* 5 values pushed */
          18 18 27 41 24
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 9 values pushed */
          9 32 64 51 3 13 55 46 2
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 11 values pushed */
          9 7 61 48 4 15 3 3 68 42 13
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 4 values pushed */
          64 15 18 17
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 16 values pushed */
          11 15 72 17 17 57 64 65 65 47 32 33 33 47 47 56
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 25 values pushed */
          89 53 47 51 50 61 62 0 62 1 11 3 50 62 50 62 5 47 3 3 7 7 5 45 5
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 11 values pushed */
          89 35 29 29 30 30 47 27 42 8 42
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 5 values pushed */
          89 24 8 0 44
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 9 values pushed */
          89 15 13 13 8 23 11 20 11
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 37 values pushed */
          89 191 47 1 63 47 79 47 239 47 3 47 64 30 34 72 45 64 27 37 72 45 64 22 25
          72 32 8 1 0 0 16 0 2 13 3 20
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 18 values pushed */
          12 15 72 47 45 8 0 20 20 0 8 45 47 5 39 57 57 60
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 35 values pushed */
          89 15 57 31 57 2 12 16 57 32 57 80 57 96 57 112 57 5 0 57 64 57 128 57 144
          57 192 57 208 57 6 16 3 57 39
          PUSHW[ ]	/* 4 values pushed */
          -16 37 39 314
          NPUSHB[ ]	/* 22 values pushed */
          89 63 37 79 37 2 191 37 207 37 2 37 64 35 39 72 37 64 12 15 72 37
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEDC3" xMin="7" yMin="-198" xMax="2057" yMax="1697">
      <contour>
        <pt x="1279" y="1696" on="1"/>
        <pt x="1424" y="1694" on="1"/>
        <pt x="1430" y="1185" on="1"/>
        <pt x="1901" y="1309" on="1"/>
        <pt x="1882" y="944" on="0"/>
        <pt x="1872" y="669" on="1"/>
        <pt x="1892" y="408" on="0"/>
        <pt x="1691" y="406" on="1"/>
        <pt x="1570" y="397" on="0"/>
        <pt x="1511" y="392" on="1"/>
        <pt x="1462" y="468" on="0"/>
        <pt x="1474" y="576" on="1"/>
        <pt x="1577" y="558" on="0"/>
        <pt x="1617" y="571" on="1"/>
        <pt x="1735" y="553" on="0"/>
        <pt x="1741" y="701" on="1"/>
        <pt x="1737" y="914" on="0"/>
        <pt x="1759" y="1149" on="1"/>
        <pt x="1447" y="1026" on="1"/>
        <pt x="1420" y="159" on="1"/>
        <pt x="1278" y="164" on="1"/>
        <pt x="1256" y="990" on="1"/>
        <pt x="973" y="883" on="1"/>
        <pt x="955" y="97" on="1"/>
        <pt x="982" y="-25" on="0"/>
        <pt x="1153" y="-38" on="1"/>
        <pt x="1634" y="-54" on="1"/>
        <pt x="1817" y="-37" on="0"/>
        <pt x="1823" y="113" on="1"/>
        <pt x="1855" y="251" on="0"/>
        <pt x="1891" y="397" on="1"/>
        <pt x="1957" y="355" on="0"/>
        <pt x="2057" y="355" on="1"/>
        <pt x="2026" y="172" on="0"/>
        <pt x="1999" y="52" on="1"/>
        <pt x="1948" y="-198" on="0"/>
        <pt x="1655" y="-196" on="1"/>
        <pt x="1105" y="-180" on="1"/>
        <pt x="798" y="-176" on="0"/>
        <pt x="811" y="91" on="1"/>
        <pt x="798" y="833" on="1"/>
        <pt x="651" y="787" on="1"/>
        <pt x="655" y="930" on="1"/>
        <pt x="822" y="1008" on="1"/>
        <pt x="832" y="1459" on="1"/>
        <pt x="953" y="1477" on="1"/>
        <pt x="984" y="1047" on="1"/>
        <pt x="1269" y="1118" on="1"/>
      </contour>
      <contour>
        <pt x="7" y="98" on="1"/>
        <pt x="152" y="140" on="0"/>
        <pt x="289" y="173" on="1"/>
        <pt x="286" y="990" on="1"/>
        <pt x="25" y="991" on="1"/>
        <pt x="37" y="1138" on="1"/>
        <pt x="313" y="1117" on="1"/>
        <pt x="287" y="1669" on="1"/>
        <pt x="445" y="1697" on="1"/>
        <pt x="441" y="1112" on="1"/>
        <pt x="675" y="1147" on="1"/>
        <pt x="697" y="998" on="1"/>
        <pt x="431" y="974" on="1"/>
        <pt x="467" y="246" on="1"/>
        <pt x="589" y="303" on="0"/>
        <pt x="708" y="341" on="1"/>
        <pt x="719" y="227" on="0"/>
        <pt x="707" y="197" on="1"/>
        <pt x="386" y="53" on="0"/>
        <pt x="54" y="-44" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 20 values pushed */
          11 65 63 52 65 63 61 59 41 41 42 42 39 61 52 48 11 2 47 19
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 4 values pushed */
          20 46 43 23
          PUSHW[ ]	/* 4 values pushed */
          353 39 30 355
          PUSHB[ ]	/* 3 values pushed */
          32 32 5
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 13 values pushed */
          20 39 50 15 15 69 50 67 48 48 57 54 61
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 8 values pushed */
          64 50 50 61 48 63 67 48
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 11 values pushed */
          89 46 43 2 47 43 47 42 3 41 42
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 21 values pushed */
          89 20 20 25 40 40 22 21 18 22 18 41 17 67 41 67 41 37 17 25 37
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 7 values pushed */
          89 32 30 30 25 63 65
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 5 values pushed */
          89 9 7 13 7
          PUSHW[ ]	/* 1 value pushed */
          317
          PUSHB[ ]	/* 7 values pushed */
          89 11 13 60 52 53 52
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 43 values pushed */
          89 44 44 0 57 53 63 13 53 53 13 63 3 3 25 64 24 40 72 25 55 55 4 0 52
          0 68 0 100 0 116 0 132 0 196 0 228 0 244 0 9 11 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 20 values pushed */
          29 40 72 0 0 16 0 64 0 112 0 128 0 5 20 2 0 0 17 17
          PUSHW[ ]	/* 1 value pushed */
          -24
          PUSHB[ ]	/* 4 values pushed */
          11 15 72 17
          PUSHW[ ]	/* 1 value pushed */
          -40
          PUSHB[ ]	/* 5 values pushed */
          16 40 72 3 17
          PUSHW[ ]	/* 1 value pushed */
          325
          NPUSHB[ ]	/* 9 values pushed */
          89 47 3 79 3 2 3 16 3
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEDDD" xMin="127" yMin="-278" xMax="2007" yMax="1584">
      <contour>
        <pt x="995" y="860" on="1"/>
        <pt x="965" y="142" on="0"/>
        <pt x="669" y="-278" on="1"/>
        <pt x="603" y="-216" on="0"/>
        <pt x="546" y="-156" on="1"/>
        <pt x="849" y="220" on="0"/>
        <pt x="822" y="864" on="1"/>
        <pt x="815" y="1584" on="1"/>
        <pt x="1886" y="1573" on="1"/>
        <pt x="1876" y="849" on="1"/>
        <pt x="1746" y="860" on="1"/>
        <pt x="1741" y="949" on="1"/>
        <pt x="974" y="942" on="1"/>
      </contour>
      <contour>
        <pt x="127" y="1504" on="1"/>
        <pt x="649" y="1507" on="1"/>
        <pt x="646" y="261" on="1"/>
        <pt x="292" y="269" on="1"/>
        <pt x="256" y="104" on="1"/>
        <pt x="151" y="117" on="1"/>
      </contour>
      <contour>
        <pt x="1835" y="747" on="1"/>
        <pt x="1936" y="633" on="1"/>
        <pt x="1625" y="420" on="0"/>
        <pt x="1282" y="241" on="1"/>
        <pt x="1291" y="56" on="1"/>
        <pt x="1302" y="-99" on="0"/>
        <pt x="1389" y="-81" on="1"/>
        <pt x="1688" y="-98" on="1"/>
        <pt x="1781" y="-63" on="0"/>
        <pt x="1835" y="59" on="1"/>
        <pt x="1843" y="130" on="0"/>
        <pt x="1852" y="305" on="1"/>
        <pt x="1923" y="265" on="0"/>
        <pt x="2007" y="243" on="1"/>
        <pt x="1999" y="94" on="0"/>
        <pt x="1973" y="-16" on="1"/>
        <pt x="1907" y="-230" on="0"/>
        <pt x="1686" y="-235" on="1"/>
        <pt x="1363" y="-228" on="1"/>
        <pt x="1125" y="-206" on="0"/>
        <pt x="1150" y="11" on="1"/>
        <pt x="1139" y="832" on="1"/>
        <pt x="1297" y="804" on="1"/>
        <pt x="1288" y="408" on="1"/>
        <pt x="1558" y="539" on="0"/>
      </contour>
      <contour>
        <pt x="1759" y="1444" on="1"/>
        <pt x="973" y="1462" on="1"/>
        <pt x="983" y="1067" on="1"/>
        <pt x="1753" y="1081" on="1"/>
      </contour>
      <contour>
        <pt x="518" y="1389" on="1"/>
        <pt x="256" y="1384" on="1"/>
        <pt x="282" y="431" on="1"/>
        <pt x="522" y="406" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 17 values pushed */
          18 40 10 18 2 16 40 42 10 19 12 32 30 30 25 25 37
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 4 values pushed */
          89 25 22 42
          PUSHW[ ]	/* 4 values pushed */
          318 89 22 -16
          PUSHB[ ]	/* 3 values pushed */
          22 50 16
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 6 values pushed */
          89 50 20 16 19 20
          PUSHW[ ]	/* 1 value pushed */
          309
          PUSHB[ ]	/* 4 values pushed */
          89 19 46 12
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 4 values pushed */
          89 46 13 49
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 11 values pushed */
          89 13 13 46 19 50 25 5 4 7 4
          PUSHW[ ]	/* 4 values pushed */
          -16 2 4 310
          PUSHB[ ]	/* 6 values pushed */
          89 22 45 2 7 45
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 4 values pushed */
          89 7 47 9
          PUSHW[ ]	/* 1 value pushed */
          351
          PUSHB[ ]	/* 3 values pushed */
          10 42 23
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          39 2 4 4 46 0
          PUSHW[ ]	/* 4 values pushed */
          352 6 15 351
          PUSHB[ ]	/* 5 values pushed */
          51 19 20 20 32
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 11 values pushed */
          51 6 39 10 4 18 30 30 53 50 17
          PUSHW[ ]	/* 2 values pushed */
          351 18
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01110]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEDEE" xMin="192" yMin="-274" xMax="1907" yMax="1566">
      <contour>
        <pt x="192" y="1566" on="1"/>
        <pt x="1907" y="1550" on="1"/>
        <pt x="1895" y="-270" on="1"/>
        <pt x="1742" y="-241" on="1"/>
        <pt x="1735" y="-154" on="1"/>
        <pt x="338" y="-118" on="1"/>
        <pt x="369" y="-274" on="1"/>
        <pt x="194" y="-251" on="1"/>
      </contour>
      <contour>
        <pt x="1461" y="563" on="1"/>
        <pt x="1560" y="563" on="0"/>
        <pt x="1721" y="563" on="1"/>
        <pt x="1673" y="404" on="1"/>
        <pt x="1465" y="384" on="1"/>
        <pt x="1203" y="405" on="0"/>
        <pt x="1174" y="626" on="1"/>
        <pt x="1201" y="1377" on="1"/>
        <pt x="920" y="1384" on="1"/>
        <pt x="894" y="815" on="0"/>
        <pt x="830" y="666" on="1"/>
        <pt x="781" y="422" on="0"/>
        <pt x="491" y="225" on="1"/>
        <pt x="428" y="321" on="0"/>
        <pt x="364" y="373" on="1"/>
        <pt x="632" y="552" on="0"/>
        <pt x="679" y="704" on="1"/>
        <pt x="750" y="862" on="0"/>
        <pt x="732" y="1402" on="1"/>
        <pt x="334" y="1380" on="1"/>
        <pt x="342" y="35" on="1"/>
        <pt x="1743" y="11" on="1"/>
        <pt x="1733" y="1377" on="1"/>
        <pt x="1369" y="1399" on="1"/>
        <pt x="1368" y="667" on="1"/>
        <pt x="1369" y="565" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 5 values pushed */
          29 3 10 10 2
          PUSHW[ ]	/* 4 values pushed */
          356 3 32 355
          PUSHB[ ]	/* 5 values pushed */
          14 20 22 22 16
          PUSHW[ ]	/* 1 value pushed */
          355
          NPUSHB[ ]	/* 11 values pushed */
          26 3 14 26 26 14 3 3 35 28 6
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 4 values pushed */
          64 7 8 12
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 6 values pushed */
          89 8 8 28 0 22
          PUSHW[ ]	/* 4 values pushed */
          -16 20 22 312
          NPUSHB[ ]	/* 19 values pushed */
          89 20 20 5 27 7 7 15 3 31 3 2 26 3 3 3 5 28 5
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 18 values pushed */
          89 15 28 31 28 47 28 79 28 4 11 3 28 31 16 27 0 27
          PUSHW[ ]	/* 1 value pushed */
          318
          NPUSHB[ ]	/* 33 values pushed */
          89 63 0 79 0 127 0 191 0 255 0 5 47 0 63 0 79 0 111 0 175 0 191 0 207
          0 7 0 64 23 26 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEDF7" xMin="33" yMin="-257" xMax="2025" yMax="1712">
      <contour>
        <pt x="377" y="1261" on="1"/>
        <pt x="1669" y="1246" on="1"/>
        <pt x="1662" y="769" on="1"/>
        <pt x="1538" y="747" on="1"/>
        <pt x="1520" y="820" on="1"/>
        <pt x="540" y="836" on="1"/>
        <pt x="523" y="776" on="1"/>
        <pt x="365" y="749" on="1"/>
      </contour>
      <contour>
        <pt x="307" y="-238" on="1"/>
        <pt x="150" y="-249" on="1"/>
        <pt x="146" y="702" on="1"/>
        <pt x="1886" y="672" on="1"/>
        <pt x="1907" y="6" on="1"/>
        <pt x="1890" y="-243" on="0"/>
        <pt x="1677" y="-230" on="1"/>
        <pt x="1531" y="-257" on="0"/>
        <pt x="1400" y="-236" on="1"/>
        <pt x="1382" y="-173" on="0"/>
        <pt x="1357" y="-86" on="1"/>
        <pt x="1522" y="-82" on="0"/>
        <pt x="1623" y="-104" on="1"/>
        <pt x="1765" y="-87" on="0"/>
        <pt x="1741" y="21" on="1"/>
        <pt x="1770" y="564" on="1"/>
        <pt x="311" y="550" on="1"/>
      </contour>
      <contour>
        <pt x="581" y="437" on="1"/>
        <pt x="1470" y="411" on="1"/>
        <pt x="1470" y="-6" on="1"/>
        <pt x="716" y="11" on="1"/>
        <pt x="718" y="-75" on="1"/>
        <pt x="580" y="-70" on="1"/>
      </contour>
      <contour>
        <pt x="33" y="1505" on="1"/>
        <pt x="948" y="1528" on="1"/>
        <pt x="896" y="1603" on="0"/>
        <pt x="890" y="1671" on="1"/>
        <pt x="1029" y="1712" on="1"/>
        <pt x="1071" y="1633" on="0"/>
        <pt x="1115" y="1500" on="1"/>
        <pt x="2018" y="1499" on="1"/>
        <pt x="2025" y="1405" on="1"/>
        <pt x="56" y="1389" on="1"/>
      </contour>
      <contour>
        <pt x="1535" y="1149" on="1"/>
        <pt x="528" y="1125" on="1"/>
        <pt x="537" y="953" on="1"/>
        <pt x="1523" y="968" on="1"/>
      </contour>
      <contour>
        <pt x="1342" y="128" on="1"/>
        <pt x="1357" y="310" on="1"/>
        <pt x="723" y="309" on="1"/>
        <pt x="733" y="122" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 2 values pushed */
          43 6
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 3 values pushed */
          7 48 29
          PUSHW[ ]	/* 4 values pushed */
          351 30 32 357
          PUSHB[ ]	/* 5 values pushed */
          37 16 37 37 35
          PUSHW[ ]	/* 4 values pushed */
          352 34 27 351
          PUSHB[ ]	/* 5 values pushed */
          45 18 45 44 2
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          3 39 39 12
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 19 values pushed */
          22 7 30 34 45 3 22 22 3 45 34 30 7 6 9 50 40 40 8
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 32 values pushed */
          64 9 34 0 35 1 15 35 35 31 30 30 28 9 0 28 16 28 32 28 3 0 28 16 28
          32 28 3 22 3 48 28
          PUSHW[ ]	/* 1 value pushed */
          311
          NPUSHB[ ]	/* 19 values pushed */
          89 0 47 16 47 32 47 3 0 47 16 47 32 47 3 22 3 25 47
          PUSHW[ ]	/* 1 value pushed */
          311
          NPUSHB[ ]	/* 15 values pushed */
          89 0 24 16 24 2 0 24 16 24 2 22 3 10 24
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 25 values pushed */
          89 7 3 7 3 5 10 0 5 16 5 32 5 3 0 5 16 5 32 5 3 22 3 43 5
          PUSHW[ ]	/* 1 value pushed */
          311
          NPUSHB[ ]	/* 19 values pushed */
          89 0 42 16 42 32 42 3 0 42 16 42 32 42 3 22 3 0 42
          PUSHW[ ]	/* 1 value pushed */
          311
          NPUSHB[ ]	/* 92 values pushed */
          89 43 48 59 48 187 48 3 11 25 1 43 25 59 25 107 25 3 10 64 11 14 72 27 43
          1 107 43 139 43 155 43 3 43 64 23 26 72 47 43 63 43 2 11 43 27 43 2 139 0
          155 0 2 47 0 63 0 2 2 15 0 31 0 2 11 48 25 10 43 0 0 43 10 25 48
          5 18 31 0 40 16 40 2 0 40 16 40 2 22 3 31 40
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 26 values pushed */
          89 37 15 31 127 31 143 31 191 31 207 31 5 11 31 15 14 31 14 47 14 3 35 3 20
          14
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 19 values pushed */
          89 20 20 16 18 9 9 16 15 16 31 16 47 16 3 35 3 18 16
          PUSHW[ ]	/* 1 value pushed */
          318
          NPUSHB[ ]	/* 12 values pushed */
          89 47 18 1 95 18 111 18 127 18 3 18
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniEE08" xMin="28" yMin="-278" xMax="2027" yMax="1714">
      <contour>
        <pt x="814" y="1590" on="1"/>
        <pt x="1823" y="1595" on="1"/>
        <pt x="1826" y="591" on="1"/>
        <pt x="1698" y="604" on="1"/>
        <pt x="1693" y="668" on="1"/>
        <pt x="1286" y="639" on="1"/>
        <pt x="1348" y="484" on="0"/>
        <pt x="1481" y="338" on="1"/>
        <pt x="1661" y="427" on="0"/>
        <pt x="1823" y="550" on="1"/>
        <pt x="1949" y="454" on="1"/>
        <pt x="1755" y="319" on="0"/>
        <pt x="1542" y="210" on="1"/>
        <pt x="1730" y="16" on="0"/>
        <pt x="2027" y="-112" on="1"/>
        <pt x="1942" y="-175" on="0"/>
        <pt x="1889" y="-265" on="1"/>
        <pt x="1339" y="78" on="0"/>
        <pt x="1167" y="669" on="1"/>
        <pt x="969" y="636" on="1"/>
        <pt x="950" y="-12" on="1"/>
        <pt x="1104" y="64" on="0"/>
        <pt x="1326" y="167" on="1"/>
        <pt x="1327" y="59" on="0"/>
        <pt x="1340" y="8" on="1"/>
        <pt x="1211" y="-40" on="0"/>
        <pt x="979" y="-194" on="1"/>
        <pt x="923" y="-215" on="0"/>
        <pt x="845" y="-278" on="1"/>
        <pt x="745" y="-143" on="1"/>
        <pt x="818" y="-76" on="0"/>
        <pt x="803" y="35" on="1"/>
      </contour>
      <contour>
        <pt x="28" y="490" on="1"/>
        <pt x="354" y="812" on="0"/>
        <pt x="575" y="1193" on="1"/>
        <pt x="718" y="1099" on="1"/>
        <pt x="617" y="954" on="0"/>
        <pt x="508" y="811" on="1"/>
        <pt x="489" y="-268" on="1"/>
        <pt x="370" y="-259" on="1"/>
        <pt x="370" y="592" on="1"/>
        <pt x="219" y="476" on="0"/>
        <pt x="94" y="352" on="1"/>
        <pt x="79" y="439" on="0"/>
      </contour>
      <contour>
        <pt x="1704" y="1434" on="1"/>
        <pt x="953" y="1467" on="1"/>
        <pt x="967" y="1188" on="1"/>
        <pt x="1692" y="1205" on="1"/>
      </contour>
      <contour>
        <pt x="56" y="1111" on="1"/>
        <pt x="355" y="1374" on="0"/>
        <pt x="537" y="1714" on="1"/>
        <pt x="690" y="1617" on="1"/>
        <pt x="446" y="1250" on="0"/>
        <pt x="116" y="979" on="1"/>
        <pt x="93" y="1065" on="0"/>
      </contour>
      <contour>
        <pt x="948" y="791" on="1"/>
        <pt x="1706" y="797" on="1"/>
        <pt x="1674" y="1065" on="1"/>
        <pt x="952" y="1067" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 18 values pushed */
          12 7 7 5 16 14 14 22 24 24 2 20 28 29 29 31 38 5
          PUSHW[ ]	/* 3 values pushed */
          352 18 -16
          PUSHB[ ]	/* 4 values pushed */
          18 46 55 20
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          31 34 16 34
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 7 values pushed */
          35 53 48 48 50 16 50
          PUSHW[ ]	/* 1 value pushed */
          350
          NPUSHB[ ]	/* 10 values pushed */
          51 35 51 38 9 10 10 47 56 2
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 11 values pushed */
          18 31 39 3 3 60 39 42 32 32 38
          PUSHW[ ]	/* 1 value pushed */
          353
          NPUSHB[ ]	/* 18 values pushed */
          64 39 7 12 12 14 5 40 37 42 35 3 3 9 19 39 22 24
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 4 values pushed */
          89 22 42 32
          PUSHW[ ]	/* 1 value pushed */
          317
          PUSHB[ ]	/* 6 values pushed */
          89 42 10 16 9 10
          PUSHW[ ]	/* 1 value pushed */
          311
          PUSHB[ ]	/* 6 values pushed */
          89 9 5 19 55 19
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 3 values pushed */
          89 55 48
          PUSHW[ ]	/* 4 values pushed */
          -16 53 48 315
          PUSHB[ ]	/* 3 values pushed */
          89 53 35
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 6 values pushed */
          12 15 72 35 58 34
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 7 values pushed */
          12 15 72 34 46 46 58
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 4 values pushed */
          89 45 55 46
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 3 values pushed */
          120 48 14
          PUSHW[ ]	/* 4 values pushed */
          -16 16 14 315
          NPUSHB[ ]	/* 17 values pushed */
          89 16 16 28 46 55 9 22 4 0 39 20 64 42 53 45 28
          PUSHW[ ]	/* 1 value pushed */
          -16
          PUSHB[ ]	/* 8 values pushed */
          28 64 11 15 72 28 51 50
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          11 15 72 50 50 0 0 45
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 15 values pushed */
          89 63 0 79 0 2 48 0 1 176 0 240 0 2 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01101]	/* MoveDirectRelPt */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x403">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x405">
      obyčejné
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x406">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x407">
      Standard
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x408">
      Κανονικά
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      © 2015  Microsoft Corporation. All Rights Reserved. Portions © 2015 Beijing Founder Electronics Co. Ltd. All Rights Reserved.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 6.21
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      MicrosoftYaHei
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei is a trademark of the Microsoft group of companies.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x409">
      Microsoft Corporation
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Founder
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      The font glyphs are certified compliant with China standard GB18030-2000 with the font name Founder Lan Ting Hei.  Microsoft Licensed the font glyph from Beijing Founder  Electronics Co. Ltd.
本字库字形从北京北大方正电子有限公司授权。本字库字形 以字库名方正兰亭黑通过中国标准符合性检测，符合中国 GB18030-2000标准。
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      http://www.microsoft.com/typography
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x409">
      http://www.founder.com.cn/cn
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      You may use this font as permitted by the EULA for the product in which this font is included to display and print content. You may only (i) embed this font in content as permitted by the embedding restrictions included in this font; and (ii) temporarily download this font to a printer or other output device to help print content.
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      http://www.microsoft.com/typography/fonts
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40a">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40b">
      Normaali
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40c">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40e">
      Normál
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x410">
      Normale
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x413">
      Standaard
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x414">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x415">
      Normalny
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x416">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x419">
      Обычный
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x41b">
      Normálne
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x41d">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x41f">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x424">
      Navadno
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x42d">
      Arrunta
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x804">
      © 2015 微软公司版权所有 © 2015 北京北大方正电子有限公司部分版权所有
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x804">
      微软雅黑
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x804">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x804">
      微软雅黑 Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x804">
      微软雅黑
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x804">
      Version 6.21
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x804">
      MicrosoftYaHeiRegular
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x804">
      Microsoft YaHei is a trademark of the Microsoft group of companies.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x804">
      Microsoft Corporation
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x804">
      北大方正电子有限公司
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x804">
      The font glyphs are certified compliant with China standard GB18030-2000 with the font name Founder Lan Ting Hei.  Microsoft Licensed the font glyph from Beijing Founder  Electronics Co. Ltd.
本字库字形从北京北大方正电子有限公司授权。本字库字形 以字库名方正兰亭黑通过中国标准符合性检测，符合中国 GB18030-2000标准。
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x804">
      http://www.microsoft.com/typography
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x804">
      http://www.founder.com.cn/cn
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x804">
      You may use this font as permitted by the EULA for the product in which this font is included to display and print content. You may only (i) embed this font in content as permitted by the embedding restrictions included in this font; and (ii) temporarily download this font to a printer or other output device to help print content.
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x80a">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x816">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0xc0a">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0xc0c">
      Normal
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-178"/>
    <underlineThickness value="129"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="8" rangeGaspBehavior="14"/>
    <gaspRange rangeMaxPPEM="21" rangeGaspBehavior="7"/>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="11"/>
  </gasp>

  <GDEF>
    <Version value="0x00010000"/>
    <GlyphClassDef Format="1">
      <ClassDef glyph=".notdef" class="1"/>
    </GlyphClassDef>
    <LigCaretList>
      <Coverage Format="1">
      </Coverage>
      <!-- LigGlyphCount=0 -->
    </LigCaretList>
  </GDEF>

  <MERG raw="True">
    <hexdata>
      00000001 000a0000 000c0000 
    </hexdata>
  </MERG>

  <meta>
    <text tag="dlng">
      Hans
    </text>
    <text tag="slng">
      Hans
    </text>
  </meta>

</ttFont>
